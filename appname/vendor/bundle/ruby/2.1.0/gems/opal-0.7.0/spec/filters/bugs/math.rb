opal_filter "Math" do
  fails "Math.erf returns a float"
  fails "Math.erf returns the error function of the argument"
  fails "Math.erf raises a TypeError if the argument cannot be coerced with Float()"
  fails "Math.erf returns NaN given NaN"
  fails "Math.erf raises a TypeError if the argument is nil"
  fails "Math.erf accepts any argument that can be coerced with Float()"
  fails "Math#erf is accessible as a private instance method"

  fails "Math.erfc returns the complementary error function of the argument"

  fails "Math.frexp returns the normalized fraction and exponent"
  fails "Math.frexp raises a TypeError if the argument cannot be coerced with Float()"
  fails "Math.frexp returns NaN given NaN"
  fails "Math.frexp raises a TypeError if the argument is nil"
  fails "Math.frexp accepts any argument that can be coerced with Float()"
  fails "Math#frexp is accessible as a private instance method"

  fails "Math.erfc returns a float"
  fails "Math.erfc returns the complimentary error function of the argument"
  fails "Math.erfc raises a TypeError if the argument cannot be coerced with Float()"
  fails "Math.erfc returns NaN given NaN"
  fails "Math.erfc raises a TypeError if the argument is nil"
  fails "Math.erfc accepts any argument that can be coerced with Float()"
  fails "Math#erfc is accessible as a private instance method"

  fails "Math.ldexp returns a float"
  fails "Math.ldexp returns the argument multiplied by 2**n"
  fails "Math.ldexp raises a TypeError if the first argument cannot be coerced with Float()"
  fails "Math.ldexp returns NaN given NaN"
  fails "Math.ldexp raises RangeError if NaN is given as the second arg"
  fails "Math.ldexp raises a TypeError if the second argument cannot be coerced with Integer()"
  fails "Math.ldexp raises a TypeError if the first argument is nil"
  fails "Math.ldexp raises a TypeError if the second argument is nil"
  fails "Math.ldexp accepts any first argument that can be coerced with Float()"
  fails "Math.ldexp accepts any second argument that can be coerced with Integer()"
  fails "Math#ldexp is accessible as a private instance method"

  fails "Math.cbrt returns a float"
  fails "Math.cbrt returns the cubic root of the argument"
  fails "Math.cbrt raises a TypeError if the argument cannot be coerced with Float()"
  fails "Math.cbrt raises a TypeError if the argument is nil"
  fails "Math.cbrt accepts any argument that can be coerced with Float()"

  fails "Math.gamma returns +infinity given 0"
  fails "Math.gamma returns -infinity given -0.0"
  fails "Math.gamma returns Math.sqrt(Math::PI) given 0.5"
  fails "Math.gamma returns exactly 1! given 2"
  fails "Math.gamma returns exactly 2! given 3"
  fails "Math.gamma returns exactly 3! given 4"
  fails "Math.gamma returns exactly 4! given 5"
  fails "Math.gamma returns exactly 5! given 6"
  fails "Math.gamma returns exactly 6! given 7"
  fails "Math.gamma returns exactly 7! given 8"
  fails "Math.gamma returns exactly 8! given 9"
  fails "Math.gamma returns exactly 9! given 10"
  fails "Math.gamma returns exactly 10! given 11"
  fails "Math.gamma returns exactly 11! given 12"
  fails "Math.gamma returns exactly 12! given 13"
  fails "Math.gamma returns exactly 13! given 14"
  fails "Math.gamma returns exactly 14! given 15"
  fails "Math.gamma returns exactly 15! given 16"
  fails "Math.gamma returns exactly 16! given 17"
  fails "Math.gamma returns exactly 17! given 18"
  fails "Math.gamma returns exactly 18! given 19"
  fails "Math.gamma returns exactly 19! given 20"
  fails "Math.gamma returns exactly 20! given 21"
  fails "Math.gamma returns exactly 21! given 22"
  fails "Math.gamma returns exactly 22! given 23"
  fails "Math.gamma returns approximately 23! given 24"
  fails "Math.gamma returns approximately 24! given 25"
  fails "Math.gamma returns approximately 25! given 26"
  fails "Math.gamma returns approximately 26! given 27"
  fails "Math.gamma returns approximately 27! given 28"
  fails "Math.gamma returns approximately 28! given 29"
  fails "Math.gamma returns approximately 29! given 30"
  fails "Math.gamma returns good numerical approximation for gamma(3.2)"
  fails "Math.gamma returns good numerical approximation for gamma(-2.15)"
  fails "Math.gamma returns good numerical approximation for gamma(0.00001)"
  fails "Math.gamma returns good numerical approximation for gamma(-0.00001)"
  fails "Math.gamma raises Math::DomainError given -1"
  fails "Math.gamma returns +infinity given +infinity"
  fails "Math.gamma raises Math::DomainError given negative infinity"
  fails "Math.gamma returns NaN given NaN"

  fails "Math.lgamma returns [Infinity, 1] when passed 0"
  fails "Math.lgamma returns [Infinity, 1] when passed -1"
  fails "Math.lgamma returns [log(sqrt(PI)), 1] when passed 0.5"
  fails "Math.lgamma returns [log(2/3*PI, 1] when passed 6.0"
  fails "Math.lgamma returns an approximate value when passed -0.5"
  fails "Math.lgamma returns an approximate value when passed -1.5"
  fails "Math.lgamma raises Math::DomainError when passed -Infinity"
  fails "Math.lgamma returns [Infinity, 1] when passed Infinity"
  fails "Math.lgamma returns [NaN, 1] when passed NaN"
end
