#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Opal
  class Parser < Racc::Parser


##### State transition tables begin ###

clist = [
'63,64,65,8,51,566,-91,-93,57,58,837,203,204,61,678,59,60,62,23,24,66',
'67,856,787,737,597,609,22,28,27,90,89,91,92,-92,734,17,597,397,398,602',
'639,7,41,6,9,94,93,-95,84,50,86,85,87,270,88,95,96,639,81,82,265,38',
'39,710,786,587,341,340,-64,543,-89,-522,-523,638,203,204,203,204,-92',
'-88,298,299,-91,36,599,598,30,608,566,52,638,603,54,753,32,-90,599,598',
'40,101,522,566,735,710,100,-75,18,-94,566,-83,-85,79,73,75,76,77,78',
'101,566,565,74,80,100,-84,-90,63,64,65,56,51,-89,53,265,57,58,37,83',
'-84,61,269,59,60,62,256,257,66,67,341,340,-94,770,-87,255,28,27,90,89',
'91,92,639,-522,217,101,305,709,305,535,100,41,537,586,94,93,542,84,50',
'86,85,87,259,88,95,96,-80,81,82,607,38,39,101,-84,-92,638,-92,100,-91',
'-92,-91,655,-92,-91,101,101,565,709,656,100,100,-90,208,-90,-86,212',
'-90,101,52,565,879,54,100,254,101,-82,565,40,-83,100,-84,-82,815,796',
'101,216,565,-81,-84,100,79,73,75,76,77,78,409,710,305,74,80,411,410',
'270,63,64,65,56,51,270,53,-445,57,58,37,83,-520,61,-445,59,60,62,256',
'257,66,67,769,737,203,204,579,255,288,292,90,89,91,92,734,655,217,225',
'-82,597,-522,-83,656,289,597,225,94,93,225,84,50,86,85,87,926,88,95',
'96,446,81,82,927,-445,597,265,-437,341,340,101,101,265,-90,-437,100',
'100,-82,222,-520,-83,793,224,223,305,-82,286,269,-83,283,73,-446,52',
'269,101,54,709,578,74,100,-520,599,598,610,735,894,599,598,595,-95,737',
'925,796,-445,79,73,75,76,77,78,-445,734,-437,74,80,599,598,600,63,64',
'65,56,51,597,53,-440,57,58,293,83,-88,61,-440,59,60,62,256,257,66,67',
'577,338,337,341,340,255,288,292,90,89,91,92,-268,611,217,-321,639,759',
'-445,-268,522,41,-321,802,94,93,692,84,50,86,85,87,803,88,95,96,549',
'81,82,735,38,39,552,599,598,604,514,583,200,638,262,401,-434,515,805',
'201,-275,263,-81,-434,806,-86,208,-275,807,212,-89,-268,52,-94,-321',
'54,338,337,341,340,535,40,552,537,-441,894,810,203,204,216,737,-441',
'781,575,79,73,75,76,77,78,576,734,780,74,80,513,582,199,63,64,65,56',
'51,-443,53,-275,57,58,37,83,-443,61,796,59,60,62,256,257,66,67,819,338',
'337,341,340,255,288,292,90,89,91,92,635,-439,217,-275,-437,820,574,615',
'-439,41,-275,-437,94,93,202,84,50,86,85,87,614,88,95,96,822,81,82,735',
'38,39,617,225,229,234,235,236,231,233,241,242,237,238,-274,218,219,583',
'101,239,240,-274,208,100,581,212,-523,-87,52,483,-275,54,619,562,222',
'-95,228,40,224,223,220,221,232,230,226,216,227,341,340,620,79,73,75',
'76,77,78,-276,561,525,74,80,442,243,-276,-227,526,101,56,443,-274,53',
'100,582,-82,37,83,63,64,65,8,51,-90,848,849,57,58,850,95,96,61,-84,59',
'60,62,23,24,66,67,-92,535,203,204,537,22,28,27,90,89,91,92,101,-276',
'17,444,481,100,444,615,7,41,552,9,94,93,-446,84,50,86,85,87,-275,88',
'95,96,-522,81,82,-275,38,39,824,225,229,234,235,236,231,233,241,242',
'237,238,-274,218,219,-268,550,239,240,-274,36,-442,-268,30,-523,-80',
'52,535,-442,54,534,32,222,-88,228,40,224,223,220,221,232,230,226,18',
'227,-275,518,519,79,73,75,76,77,78,-274,592,-276,74,80,-254,243,-274',
'593,-276,401,56,-523,-274,53,572,-268,573,37,83,63,64,65,225,51,-444',
'101,549,57,58,546,100,-444,61,618,59,60,62,256,257,66,67,103,104,105',
'106,107,255,288,292,90,89,91,92,222,-274,217,-276,224,223,220,221,796',
'41,573,483,94,93,772,84,50,86,85,87,832,88,95,96,265,81,82,834,38,39',
'837,225,229,234,235,236,231,233,241,242,237,238,838,218,219,203,204',
'239,240,840,208,815,796,212,842,844,52,539,846,54,490,538,222,490,228',
'40,224,223,220,221,232,230,226,216,227,-256,225,305,79,73,75,76,77,78',
'692,225,524,74,80,523,243,636,63,64,65,56,51,-255,53,225,57,58,37,83',
'265,61,305,59,60,62,23,24,66,67,103,104,105,106,107,22,28,27,90,89,91',
'92,755,274,17,857,338,337,341,340,858,41,859,265,94,93,265,84,50,86',
'85,87,225,88,95,96,244,81,82,516,38,39,862,225,229,234,235,236,231,233',
'241,242,237,238,863,218,219,678,509,239,240,865,208,508,-254,212,869',
'661,52,507,225,54,713,874,222,252,228,40,224,223,220,221,232,230,226',
'18,227,-63,876,573,79,73,75,76,77,78,705,490,483,74,80,481,243,882,63',
'64,65,56,51,884,53,885,57,58,37,83,305,61,479,59,60,62,23,24,66,67,103',
'104,105,106,107,22,28,27,90,89,91,92,702,554,17,333,331,330,213,332',
'448,41,447,700,94,93,898,84,50,86,85,87,-257,88,95,96,445,81,82,690',
'38,39,899,225,229,234,235,236,231,233,241,242,237,238,901,218,219,412',
'652,239,240,399,208,-523,552,212,305,911,52,912,388,54,385,686,222,917',
'228,40,224,223,220,221,232,230,226,18,227,791,919,842,79,73,75,76,77',
'78,842,844,685,74,80,305,243,684,63,64,65,56,51,297,53,657,57,58,37',
'83,928,61,296,59,60,62,256,257,66,67,244,665,244,934,667,255,288,292',
'90,89,91,92,-75,554,217,333,331,330,684,332,198,41,197,196,94,93,195',
'84,50,86,85,87,259,88,95,96,678,81,82,944,38,39,842,225,229,234,235',
'236,231,233,241,242,237,238,946,218,219,947,108,239,240,528,208,668',
'97,212,670,,52,,,54,,644,222,,228,40,224,223,220,221,232,230,226,216',
'227,,,,79,73,75,76,77,78,,,,74,80,,243,,63,64,65,56,51,,53,,57,58,37',
'83,,61,,59,60,62,256,257,66,67,,,,,,255,28,27,90,89,91,92,,,217,,,,',
',,41,,,94,93,,84,50,86,85,87,259,88,95,96,,81,82,,38,39,,225,229,234',
'235,236,231,233,241,242,237,238,,218,219,,,239,240,,208,,,212,,,52,',
',54,,254,222,,228,40,224,223,220,221,232,230,226,216,227,,,,79,73,75',
'76,77,78,,,,74,80,,243,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62',
'256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84',
'50,86,85,87,259,88,95,96,,81,82,,38,39,,225,229,234,235,236,231,233',
'241,242,237,238,,218,219,,,239,240,,208,,,212,,,52,,225,54,,,222,,228',
'40,224,223,220,221,232,230,226,216,227,,,,79,73,75,76,77,78,,,,74,80',
'222,243,,-227,224,223,56,,,53,,,,37,83,63,64,65,8,51,,,,57,58,,,,61',
',59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94',
'93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,225,229,234,235,236,231',
'233,241,242,237,238,,218,219,,,239,240,,36,,,30,,,52,,,54,,32,222,,228',
'40,224,223,220,221,232,230,226,18,227,,,,79,73,75,76,77,78,,,,74,80',
',243,,,,,56,,,53,,,,37,83,63,64,65,8,51,,,,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84,50,86',
'85,87,,88,95,96,,81,82,,38,39,,225,229,234,235,236,231,233,241,242,237',
'238,,218,219,,,239,240,,36,,,30,,,52,,,54,,32,222,,228,40,224,223,220',
'221,232,230,226,18,227,,,,79,73,75,76,77,78,,,,74,80,,243,,63,64,65',
'56,51,,53,,57,58,37,83,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89',
'91,92,,,17,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39',
',225,229,234,235,236,231,233,241,242,237,238,,218,219,,,239,240,,208',
',,212,213,,52,,,54,,,222,,228,40,224,223,220,221,232,230,226,18,227',
',,,79,73,75,76,77,78,,,,74,80,,243,,63,64,65,56,51,,53,,57,58,37,83',
',61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,217,,,,,,,41,',
',94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,225,229,234,235,236',
'231,233,241,242,237,238,,218,219,,,239,240,,208,,,212,,,52,,,54,,,222',
',228,40,224,223,220,221,232,230,226,216,227,,,,79,73,75,76,77,78,,,',
'74,80,,243,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66',
'67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85',
'87,,88,95,96,,81,82,,38,39,,225,229,234,235,236,231,233,241,242,237',
'238,,218,219,,,239,240,,208,,,212,,,52,,,54,,,222,,228,40,224,223,220',
'221,232,230,226,216,227,,,,79,73,75,76,77,78,,,,74,80,,243,,,,,56,,',
'53,,,,37,83,63,64,65,8,51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,',
'22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84,50,86,85,87,,88,95',
'96,,81,82,,38,39,,225,229,234,235,236,231,233,241,242,237,238,,218,219',
',,239,240,,36,,,30,,,52,,,54,,32,222,,228,40,224,223,220,221,232,230',
'226,18,227,,,,79,73,75,76,77,78,,,,74,80,,243,,63,64,65,56,51,,53,,57',
'58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,28,27,90,89,91,92,,,217',
',,,,,,41,,,94,93,,84,50,86,85,87,259,88,95,96,,81,82,,38,39,,225,229',
'234,235,236,231,233,241,242,237,238,,218,219,,,239,240,,208,,,212,,',
'52,,,54,,254,222,252,228,40,224,223,220,221,232,230,226,216,227,,,,79',
'73,75,76,77,78,,,,74,80,,243,,63,64,65,56,51,,53,,57,58,37,83,,61,,59',
'60,62,256,257,66,67,,,,,,255,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93',
',84,50,86,85,87,259,88,95,96,,81,82,,38,39,,225,229,234,235,236,231',
'233,241,242,237,238,,218,219,,,239,240,,208,,,212,,,52,,,54,,254,222',
'252,228,40,224,223,220,221,232,230,226,216,227,,,,79,73,75,76,77,78',
',,,74,80,,243,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257',
'66,67,,,,,,255,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85',
'87,259,88,95,96,,81,82,,38,39,,225,229,234,235,236,231,233,241,242,237',
'238,,218,219,,,239,240,,208,,,212,,,52,,,54,,254,222,252,228,40,224',
'223,220,221,232,230,226,216,227,,,,79,73,75,76,77,78,,,,74,80,,243,',
',,,56,,,53,,,,37,83,63,64,65,8,51,,,,57,58,,,,61,,59,60,62,23,24,66',
'67,,,,,,22,28,27,90,89,91,92,,554,17,333,331,330,,332,7,41,,9,94,93',
',84,50,86,85,87,,88,95,96,,81,82,,38,39,,554,,333,331,330,,332,554,557',
'333,331,330,,332,,,560,,,36,,,30,,,52,,,54,,32,,,,40,,,324,557,333,331',
'330,18,332,,557,560,79,73,75,76,77,78,812,,,74,80,,,,63,64,65,56,51',
',53,,57,58,37,83,,61,335,59,60,62,256,257,66,67,338,337,341,340,,255',
'288,292,90,89,91,92,,225,217,,,,,,,41,,,94,93,,84,50,86,85,87,259,88',
'95,96,,81,82,,38,39,,225,222,,,,224,223,220,221,,,,,,,,239,240,,208',
',,212,,,52,,,54,,,222,252,228,40,224,223,220,221,,,226,216,227,,,,79',
'73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60',
'62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93',
',84,50,86,85,87,259,88,95,96,,81,82,,38,39,,225,229,234,235,236,231',
'233,241,242,237,238,,-543,-543,,,239,240,,208,,,212,,,52,,,54,,644,222',
'252,228,40,224,223,220,221,232,230,226,216,227,,,,79,73,75,76,77,78',
',,,74,80,,,,,,,56,,,53,,,,37,83,63,64,65,8,51,,,,57,58,,,,61,,59,60',
'62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84',
'50,86,85,87,,88,95,96,,81,82,,38,39,,225,229,234,235,236,231,233,241',
',237,238,,,,,,239,240,,36,,,30,,,52,,,54,,32,222,,228,40,224,223,220',
'221,232,230,226,18,227,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,',
',,37,83,63,64,65,8,51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28',
'27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84,50,86,85,87,,88,95,96,,81',
'82,,38,39,,225,229,234,235,236,231,233,241,242,237,238,,-543,-543,,',
'239,240,,36,,,278,,,52,,,54,,32,222,,228,40,224,223,220,221,232,230',
'226,18,227,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58',
'37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217',
',,,,,,289,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,324,,333,331,330',
'225,332,,,,,,,,,,,,,,,239,240,286,,,283,,,52,,,54,,282,,222,,335,,224',
'223,220,221,,,338,337,341,340,,79,73,75,76,77,78,774,,,74,80,,,,63,64',
'65,56,51,,53,,57,58,293,83,,61,,59,60,62,256,257,66,67,,,,,,255,288',
'292,90,89,91,92,,,217,,,,,,,289,,,94,93,,84,50,86,85,87,,88,95,96,,81',
'82,747,,333,331,330,737,332,,,,,,,,,,734,,,,,,,286,,,212,,,52,,,54,',
',,,,335,732,,,,,,,338,337,341,340,,79,73,75,76,77,78,,,,74,80,,,,295',
',,56,,,53,,,,293,83,63,64,65,,51,,,735,57,58,,,,61,,59,60,62,256,257',
'66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,289,,,94,93,,84,50,86',
'85,87,,88,95,96,,81,82,747,,333,331,330,737,332,,,,,,,,,,734,,,,,,,696',
',,212,,,52,,,54,,,,,,335,732,,,,,,,338,337,341,340,,79,73,75,76,77,78',
',,,74,80,,,,,,,56,,,53,,,,293,83,63,64,65,8,51,,,735,57,58,,,,61,,59',
'60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93',
',84,50,86,85,87,,88,95,96,,81,82,,38,39,,225,,,,,,,,,,,,,,,,239,240',
',36,,,30,,,52,,,54,,32,222,,228,40,224,223,220,221,,,226,18,227,,,,79',
'73,75,76,77,78,,,,74,80,,,,,,,56,,,53,,,,37,83,63,64,65,8,51,,,,57,58',
',,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41',
',9,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,225,229,234,235,236',
'231,233,,,237,238,,,,,,239,240,,36,,,30,,,52,,,54,,32,222,,228,40,224',
'223,220,221,232,230,226,18,227,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56',
',,53,,,,37,83,63,64,65,8,51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,',
',,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84,50,86,85,87,,88,95',
'96,,81,82,,38,39,,225,,,,,,,,,,,,,,,,239,240,,36,,,30,,,52,,,54,,32',
'222,,228,40,224,223,220,221,,,226,18,227,,,,79,73,75,76,77,78,,,,74',
'80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,',
',,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88',
'95,96,,81,82,,38,39,,225,,,,,,,,,,,,,,,,239,240,,208,,,212,,,52,,,54',
',,222,,228,40,224,223,220,221,,,226,216,227,,,,79,73,75,76,77,78,,,',
'74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67',
',,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87',
',88,95,96,,81,82,,38,39,,225,-543,-543,-543,-543,231,233,,,-543,-543',
',,,,,239,240,,208,,,212,,,52,,,54,,,222,,228,40,224,223,220,221,232',
'230,226,216,227,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53',
',57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92',
',,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,225',
'-543,-543,-543,-543,231,233,,,-543,-543,,,,,,239,240,,208,,,212,,,52',
',,54,,,222,,228,40,224,223,220,221,232,230,226,216,227,,,,79,73,75,76',
'77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256',
'257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50',
'86,85,87,,88,95,96,,81,82,,38,39,,225,-543,-543,-543,-543,231,233,,',
'-543,-543,,,,,,239,240,,208,,,212,,,52,,,54,,644,222,252,228,40,224',
'223,220,221,232,230,226,216,227,,,,79,73,75,76,77,78,,,,74,80,,,,,,',
'56,,,53,,,,37,83,63,64,65,8,51,,,,57,58,,,,61,,59,60,62,23,24,66,67',
',,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84,50,86,85,87,,88',
'95,96,,81,82,,38,39,,225,-543,-543,-543,-543,231,233,,,-543,-543,,,',
',,239,240,,36,,,30,,,52,,,54,,32,222,,228,40,224,223,220,221,232,230',
'226,18,227,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58',
'37,83,,61,,59,60,62,256,257,66,67,,,,,,255,28,27,90,89,91,92,,,217,',
',,,,,41,,,94,93,,84,50,86,85,87,259,88,95,96,,81,82,,38,39,,225,-543',
'-543,-543,-543,231,233,,,-543,-543,,,,,,239,240,,208,,,212,,,52,,,54',
',254,222,,228,40,224,223,220,221,232,230,226,216,227,,,,79,73,75,76',
'77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,23,24',
'66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,,84,50,86,85,87',
',88,95,96,,81,82,,38,39,,225,-543,-543,-543,-543,231,233,,,-543,-543',
',,,,,239,240,,208,,,212,,,52,,,54,,,222,,228,40,224,223,220,221,232',
'230,226,18,227,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,',
'57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,28,27,90,89,91,92,',
',217,,,,,,,41,,,94,93,,84,50,86,85,87,259,88,95,96,,81,82,,38,39,,225',
',,,,,,,,,,,,,,,239,240,,208,,,212,,,52,,,54,,254,222,,228,40,224,223',
'220,221,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53',
',57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92',
',,217,,,,,,,41,,,94,93,,84,50,86,85,87,259,88,95,96,,81,82,,38,39,,225',
',,,,,,,,,,,,,,,239,240,,208,,,212,,,52,,,54,,,222,,228,40,224,223,220',
'221,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57',
'58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,28,27,90,89,91,92,,,217',
',,,,,,41,,,94,93,,84,50,86,85,87,259,88,95,96,,81,82,,38,39,,,,,,,,',
',,,,,,,,,,,,208,,,212,,,52,,,54,,254,,,,40,,,,,,,,216,,,,,79,73,75,76',
'77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,23,24',
'66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,,84,50,86,85,87',
',88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,',
',40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,',
'57,58,37,83,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17',
',,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,',
',,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78',
',,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,23,24,66,67',
',,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,,84,50,86,85,87,,88',
'95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40',
',,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58',
'37,83,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,',
',41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,',
',,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74',
'80,101,,,,,100,56,,,53,,,,37,83,63,64,65,,51,,,,57,58,,,,61,,59,60,62',
'256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,289,,,94,93,',
'84,50,86,85,87,,88,95,96,,81,82,324,,333,331,330,,332,,,,,,,,,,,,,,',
',,353,,,30,,,52,,,54,,32,,,,335,,545,,,,,,338,337,341,340,,79,73,75',
'76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,293,83,,61,,59,60,62',
'256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,289,,,94,93,',
'84,50,86,85,358,,88,95,96,,81,82,324,,333,331,330,,332,,,,,,,,,,,,,',
'364,,,359,,,212,,,52,,,54,,,,,,335,319,,,,,,,338,337,341,340,,79,73',
'75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,293,83,,61,,59,60',
'62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,,84,50',
'86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52',
',,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53',
',,,37,83,63,64,65,8,51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22',
'28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84,50,86,85,87,,88,95,96',
',81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,54,,32,,,,40,,,,,,',
',18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,,,,37,83,63,64,65,8',
'51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,',
'17,,,,,,7,41,,9,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,',
',,,,,,,,,,,,,,36,,,30,,,52,,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76',
'77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256',
'257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50',
'86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52',
',,54,,644,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65',
'56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292',
'90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82',
',38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,',
',,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61',
',59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41',
',,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,',
'208,,,212,,,52,,,54,,758,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74',
'80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,23,24,66,67,,,,',
',22,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95',
'96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,',
',,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58',
'37,83,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,217,,,,',
',,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,',
',,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,',
',74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67',
',,,,,255,288,292,90,89,91,92,,,217,,,,,,,289,,,94,93,,84,50,86,85,87',
',88,95,96,,81,82,747,,333,331,330,737,332,,,,,,,,,,734,,,,,,,906,,,212',
',,52,,,54,,,,,,335,,,,,,,,338,337,341,340,,79,73,75,76,77,78,,,,74,80',
',,,,,,56,,,53,,,,293,83,63,64,65,8,51,,,735,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,6,9,94,93,,84,50,86',
'85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,54',
',32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,401,56,,,53',
',,,37,83,63,64,65,,51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28',
'27,90,89,91,92,,,17,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82',
',38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,18,,,',
',79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,',
'59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93',
',84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212',
',,52,,,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64',
'65,56,51,,53,,57,58,37,83,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90',
'89,91,92,,,17,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38',
'39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,18,,,,,79',
'73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60',
'62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,,84,50',
'86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52',
',,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53',
',,,37,83,63,64,65,8,51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22',
'28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84,50,86,85,87,,88,95,96',
',81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,54,,32,,,,40,,,,,,',
',18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,,,,37,83,63,64,65,8',
'51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,',
'17,,,,,,7,41,6,9,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,',
',,,,,,,,,,,,,,,36,,,30,,,52,,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76',
'77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,23,24',
'66,67,,,,,,22,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85',
'87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,',
',,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,',
'53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91',
'92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,',
',,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75',
'76,77,78,,,,74,80,,,,,,,56,,,53,,,,37,83,63,64,65,8,51,,,,57,58,,,,61',
',59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94',
'93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,',
'30,,,52,,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,',
',,56,,,53,,,,37,83,63,64,65,8,51,,,,57,58,,,,61,,59,60,62,23,24,66,67',
',,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84,50,86,85,87,,88',
'95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,54,,32,,,,40',
',,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58',
'37,83,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,217,,,,',
',,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,',
',,,,,208,,,212,,,52,,,54,,418,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78',
',,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,23,24,66,67',
',,,,,22,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88',
'95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,418,,,',
'40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,',
'57,58,37,83,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,217',
',,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,',
',,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78',
',,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66',
'67,,,,,,255,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87',
'259,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,',
'254,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51',
',53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89',
'91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39',
',,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73',
'75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62',
'256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84',
'50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,',
'52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65',
'56,51,,53,,57,58,37,83,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89',
'91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39',
',,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73',
'75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,,84,50,86',
'85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54',
',,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,',
'53,,57,58,37,83,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92',
',,17,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,',
',,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76',
'77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256',
'257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50',
'86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52',
',,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56',
'51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90',
'89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38',
'39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79',
'73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60',
'62,256,257,66,67,,,,,,255,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,',
'84,50,86,85,87,259,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,',
'212,,,52,,,54,,254,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,',
',,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255',
'288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96',
',81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,',
',216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37',
'83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,',
',,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,',
',,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78',
',,,74,80,,,,,,,56,,,53,,,,37,83,63,64,65,8,51,,,,57,58,,,,61,,59,60',
'62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84',
'50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52',
',,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53',
',,,37,83,63,64,65,8,51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22',
'28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84,50,86,85,87,,88,95,96',
',81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,54,,32,,,,40,,,,,,',
',18,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83',
',61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,',
'94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208',
',,212,,450,52,,,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80',
',,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,',
'255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95',
'96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,',
',,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58',
'37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217',
',,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,',
',,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78',
',,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66',
'67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85',
'87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,',
',,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,',
'53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91',
'92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,',
',,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75',
'76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256',
'257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50',
'86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52',
',,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56',
'51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90',
'89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38',
'39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79',
'73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60',
'62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93',
',84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212',
',,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64',
'65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292',
'90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82',
',38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,',
',,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61',
',59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41',
',,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,',
'208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80',
',,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,',
'255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95',
'96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,',
',,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58',
'37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217',
',,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,',
',,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78',
',,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66',
'67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85',
'87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,',
',,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,',
'53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91',
'92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,',
',,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75',
'76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256',
'257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50',
'86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52',
',,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56',
'51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90',
'89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38',
'39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79',
'73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60',
'62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93',
',84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212',
',,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64',
'65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292',
'90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82',
',38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,',
',,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61',
',59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41',
',,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,',
'208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80',
',,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,',
'255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95',
'96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,',
',,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58',
'37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217',
',,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,',
',,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78',
',,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66',
'67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85',
'87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,',
',,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,',
'53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91',
'92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,',
',,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75',
'76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256',
'257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50',
'86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52',
',,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56',
'51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90',
'89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38',
'39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79',
'73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60',
'62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93',
',84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212',
',,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64',
'65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292',
'90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82',
',38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,',
',,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61',
',59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41',
',,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,',
'208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80',
',,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,',
'255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95',
'96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,',
',,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58',
'37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217',
',,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,',
',,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78',
',,,74,80,,,,,,,56,,,53,,,,37,83,63,64,65,8,51,,,,57,58,,,,61,,59,60',
'62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84',
'50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52',
',,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65',
'56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,28,27,90',
'89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,259,88,95,96,,81,82',
',38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,644,,252,,40,,,,,,,',
'216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83',
',61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,',
',41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,',
',,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,',
'74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,23,24,66,67,',
',,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95',
'96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,',
',,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37',
'83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,',
',,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,',
',,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78',
',,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66',
'67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85',
'87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,',
',,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,,,,37',
'83,63,64,65,8,51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27',
'90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84,50,86,85,87,,88,95,96,,81,82',
',38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,54,,32,,,,40,,,,,,,,18,,,',
',79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,,,,37,83,63,64,65,8,51,,,',
'57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,',
',,7,41,,9,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,',
',,,,,,,,36,,,30,,,52,,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78',
',,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66',
'67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,289,,,94,93,,84,50,86,85',
'87,,88,95,96,,81,82,,,,,,,,,,,,,,,,,,,,,,,,286,,,283,,,52,,,54,,,,,',
',,,,,,,,,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58',
'293,83,,61,,59,60,62,256,257,66,67,,,,,,255,28,27,90,89,91,92,,,217',
',,,,,,41,,,94,93,,84,50,86,85,87,259,88,95,96,,81,82,,38,39,,,,,,,,',
',,,,,,,,,,,,208,,,212,,,52,,,54,,254,,252,,40,,,,,,,,216,,,,,79,73,75',
'76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256',
'257,66,67,,,,,,255,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86',
'85,87,259,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,499',
',,54,,254,,252,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64',
'65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,28,27',
'90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,259,88,95,96,,81',
'82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,503,52,,,54,,254,,252,,40,',
',,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,,,,37,83,63,64',
'65,8,51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,7,41,,9,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,',
',,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75',
'76,77,78,,,,74,80,,,,,,,56,,,53,,,,37,83,63,64,65,8,51,,,,57,58,,,,61',
',59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94',
'93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,',
'30,,,52,,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,63',
'64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,23,24,66,67,,,,,,22,28,27',
'90,89,91,92,,,17,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,',
'38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,18,,,,',
'79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,,,,37,83,63,64,65,8,51,,,,57',
'58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7',
'41,,9,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,',
',,,,36,,,278,,,52,,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,',
'74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67',
',,,,,255,288,292,90,89,91,92,,,217,,,,,,,289,,,94,93,,84,50,86,85,87',
',88,95,96,,81,82,747,,333,331,330,737,332,,,,,,,,,,734,,,,,,,286,,,283',
',,52,,,54,,,,,,335,,,,,,,,338,337,341,340,,79,73,75,76,77,78,,,,74,80',
',,,,,,56,,,53,,,,293,83,63,64,65,8,51,,,735,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84,50,86',
'85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,54',
',32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51',
',53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89',
'91,92,,,217,,,,,,,289,,,94,93,,84,50,86,85,358,,88,95,96,,81,82,,,,',
',,,,,,,,,,,,,,,,,,,359,,,212,,,52,,,54,,,,,,,,,,,,,,,,,,,79,73,75,76',
'77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,293,83,,61,,59,60,62,256',
'257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,289,,,94,93,,84,50',
'86,85,87,,88,95,96,,81,82,,,,,,,,,,,,,,,,,,,,,,,,286,,,212,,,52,,,54',
',,,,,,,,,,,,,,,,,,79,73,75,76,77,78,,,,74,80,,,,511,,,56,,,53,,,,293',
'83,63,64,65,8,51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27',
'90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84,50,86,85,87,,88,95,96,,81,82',
',38,39,,,,,,,,,,,,,,,,,,,,,36,,,278,,,52,,,54,,32,,,,40,,,,,,,,18,,',
',,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61',
',59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41',
',,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,',
'208,,,212,,,52,,,54,,418,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74',
'80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,23,24,66,67,,,,',
',22,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95',
'96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,',
',,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58',
'37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217',
',,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,',
',,,,,,,,,208,,,212,,,52,,,54,,254,,,,40,,,,,,,,216,,,,,79,73,75,76,77',
'78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,23,24,66',
'67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,,84,50,86,85,87,',
'88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,',
'40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57',
'58,37,83,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,',
',,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,',
',,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,',
',,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66',
'67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85',
'87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,',
',,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,',
'53,,57,58,37,83,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92',
',,17,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,',
',,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76',
'77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256',
'257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50',
'86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52',
',,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56',
'51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288,292,90',
'89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38',
'39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79',
'73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60',
'62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,289,,,94,93',
',84,50,86,85,87,,88,95,96,,81,82,,,,,,,,,,,,,,,,,,,,,,,,286,,,283,,',
'52,,,54,,,,,,,,,,,,,,,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,',
',,293,83,63,64,65,8,51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22',
'28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84,50,86,85,87,,88,95,96',
',81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,54,,32,,,,40,,,,,,',
',18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,,,,37,83,63,64,65,8',
'51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,',
'17,,,,,,7,41,,9,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,',
',,,,,,,,,,,,,,36,,,30,,,52,,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76',
'77,78,,,,74,80,,,,,,,56,,,53,,,,37,83,63,64,65,8,51,,,,57,58,,,,61,',
'59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94',
'93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,',
'30,,,52,,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,63',
'64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67,,,,,,255,288',
'292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87,,88,95,96,,81',
'82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216',
',,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,,,,37,83,63,64,65,8,51',
',,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17',
',,,,,7,41,,9,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,',
',,,,,,,,,,,36,,,30,,,52,,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77',
'78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257',
'66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86',
'85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,528,,52',
',,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53',
',,,37,83,63,64,65,8,51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22',
'28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,,84,50,86,85,87,,88,95,96',
',81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,54,,32,,,,40,,,,,,',
',18,,,,,79,73,75,76,77,78,,,,74,80,,,,63,64,65,56,51,,53,,57,58,37,83',
',61,,59,60,62,256,257,66,67,,,,,,255,288,292,90,89,91,92,,,217,,,,,',
',41,,,94,93,,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,',
',,,,208,,,212,,,52,,,54,,,,,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,',
'74,80,,,,63,64,65,56,51,,53,,57,58,37,83,,61,,59,60,62,256,257,66,67',
',,,,,255,288,292,90,89,91,92,,,217,,,,,,,41,,,94,93,,84,50,86,85,87',
',88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,208,,,212,,,52,,,54,,254',
',,,40,,,,,,,,216,,,,,79,73,75,76,77,78,,,,74,80,,,,-437,,,56,,,53,-437',
'-437,-437,37,83,-437,-437,-437,,-437,,,,,,,,-437,,-437,-437,-437,,,',
',,,,-437,-437,,-437,-437,-437,-437,-437,,,,,,,,,,,,,,,,,,,,,,,,-437',
'-437,-437,-437,-437,-437,-437,-437,-437,-437,-437,-437,-437,-437,,,-437',
'-437,-437,,-437,-437,,,-437,,,-437,,-437,,-437,,-437,,-437,-437,-437',
'-437,-437,-437,-437,,-437,,-437,,,,,,,,,,,,,-437,-437,-437,-437,,-437',
'-434,-437,-437,,,-437,,-434,-434,-434,,,-434,-434,-434,,-434,,,,,,,',
'-434,,-434,-434,-434,,,,,,,,-434,-434,,-434,-434,-434,-434,-434,,,,',
',,,,,,,,,,,,,,,,,,,-434,-434,-434,-434,-434,-434,-434,-434,-434,-434',
'-434,-434,-434,-434,,,-434,-434,-434,,-434,-434,,,-434,,,-434,,-434',
',-434,,-434,,-434,-434,-434,-434,-434,-434,-434,,-434,,-434,,,,,,,,',
',,,,-434,-434,-434,-434,,-434,-526,-434,-434,,,-434,,-526,-526,-526',
',,-526,-526,-526,,-526,,,,,,,,,-526,-526,-526,,,,,,,,,-526,-526,,-526',
'-526,-526,-526,-526,,,,,,,,,,,,,,,,,,,,,,,,-526,-526,-526,-526,-526',
'-526,-526,-526,-526,-526,-526,-526,-526,-526,,,-526,-526,-526,,771,-526',
',,-526,,,-526,,-526,,-526,,-526,,-526,-526,-526,-526,-526,-526,-526',
',-526,-526,-526,,,,,,,,,,,,,-526,-526,-526,-526,,-526,-526,,-526,,,-91',
',-526,-526,-526,,,,-526,-526,,-526,,,,,,,,,-526,,,,,,,,,,,-526,-526',
',-526,-526,-526,-526,-526,,,,,,,,,,,,,,,,,,,,,,,,-526,-526,-526,-526',
'-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,,,-526,-526,-526,',
'625,,,,-526,,,,,,,-526,,-526,,-526,-526,-526,-526,-526,-526,-526,,-526',
'-526,-526,,,,,,,,,,,,,-526,-526,,-83,,-526,-274,,-526,,,-91,,-274,-274',
'-274,,,-274,-274,-274,,-274,,,,,,,,,,-274,-274,,,,,,,,,-274,-274,,-274',
'-274,-274,-274,-274,,,,,,,,,,,,,,,,,,,,,,,,-274,-274,-274,-274,-274',
'-274,-274,-274,-274,-274,-274,-274,-274,-274,,,-274,-274,-274,,628,-274',
',,-274,,,-274,,-274,,-274,,-274,,-274,-274,-274,-274,-274,-274,-274',
',-274,,-274,,,,,,,,,,,,,-274,-274,-274,-274,,-274,-274,,-274,,,-93,',
'-274,-274,-274,,,,-274,-274,,-274,,,,,,,,,,,,,,,,,,,,-274,-274,,-274',
'-274,-274,-274,-274,,,,,,,,,,,,,,,,,,,,,,,,-274,-274,-274,-274,-274',
'-274,-274,-274,-274,-274,-274,-274,-274,-274,,,-274,-274,-274,,628,',
',,-274,,,,,,,-274,,-274,,-274,-274,-274,-274,-274,-274,-274,,-274,,-274',
',,,,,,,,,,,,-274,-274,,-85,,-274,-269,,-274,,,-93,,-269,-269,-269,,',
'-269,-269,-269,,-269,,,,,,,,,,-269,-269,-269,,,,,,,,-269,-269,,-269',
'-269,-269,-269,-269,,,,,,,,,,,,,,,,,,,,,,,,-269,-269,-269,-269,-269',
'-269,-269,-269,-269,-269,-269,-269,-269,-269,,,-269,-269,-269,,,-269',
',,-269,,,-269,,-269,,-269,,-269,,-269,-269,-269,-269,-269,-269,-269',
',-269,,-269,,,,,,,,,,,,,-269,-269,-269,-269,-542,-269,,-269,-269,,,-542',
'-542,-542,,,-542,-542,-542,,-542,,,,,,,,,-542,-542,-542,,,,,,,,,-542',
'-542,,-542,-542,-542,-542,-542,,,,,,,,,,,,,,,,,,,,,,,,-542,-542,-542',
'-542,-542,-542,-542,-542,-542,-542,-542,-542,-542,-542,,,-542,-542,-542',
',,-542,,265,-542,,,-542,,-542,,-542,,-542,,-542,-542,-542,-542,-542',
'-542,-542,,-542,-542,-542,,,,,,,,,,,,,-542,-542,-542,-542,-528,-542',
',,-542,,,-528,-528,-528,,,-528,-528,-528,,-528,,,,,,,,,-528,-528,-528',
'-528,,,,,,,,-528,-528,,-528,-528,-528,-528,-528,,,,,,,,,,,,,,,,,,,,',
',,,-528,-528,-528,-528,-528,-528,-528,-528,-528,-528,-528,-528,-528',
'-528,,,-528,-528,-528,,,-528,,,-528,,,-528,,-528,,-528,,-528,,-528,-528',
'-528,-528,-528,-528,-528,,-528,-528,-528,,,,,,,,,,,,,-528,-528,-528',
'-528,-370,-528,,-528,-528,,,-370,-370,-370,,,-370,-370,-370,,-370,,',
',,,,,,-370,-370,-370,,,,,,,,,-370,-370,,-370,-370,-370,-370,-370,,,',
',,,,,,,,,,,,,,,,,,,,-370,-370,-370,-370,-370,-370,-370,-370,-370,-370',
'-370,-370,-370,-370,,,-370,-370,-370,,,-370,,265,-370,,,-370,,-370,',
'-370,,-370,,-370,-370,-370,-370,-370,-370,-370,,-370,-370,-370,,,,,',
',,,,,,,-370,-370,-370,-370,-282,-370,,,-370,,,-282,-282,-282,,,-282',
'-282,-282,,-282,,,,,,,,,,-282,-282,,,,,,,,,-282,-282,,-282,-282,-282',
'-282,-282,,,,,,,,,,,,,,,,,,,,,,,,-282,-282,-282,-282,-282,-282,-282',
'-282,-282,-282,-282,-282,-282,-282,,,-282,-282,-282,,,-282,,274,-282',
',,-282,,-282,,-282,,-282,,-282,-282,-282,-282,-282,-282,-282,,-282,',
'-282,,,,,,,,,,,,,-282,-282,-282,-282,-527,-282,,,-282,,,-527,-527,-527',
',,-527,-527,-527,,-527,,,,,,,,,-527,-527,-527,-527,,,,,,,,-527,-527',
',-527,-527,-527,-527,-527,,,,,,,,,,,,,,,,,,,,,,,,-527,-527,-527,-527',
'-527,-527,-527,-527,-527,-527,-527,-527,-527,-527,,,-527,-527,-527,',
',-527,,,-527,,,-527,,-527,,-527,,-527,,-527,-527,-527,-527,-527,-527',
'-527,,-527,-527,-527,,,,,,,,,,,,,-527,-527,-527,-527,-542,-527,,-527',
'-527,,,-542,-542,-542,,,-542,-542,-542,,-542,,,,,,,,,,-542,,,,,,,,,',
'-542,-542,,-542,-542,-542,-542,-542,,,,,,,,,,,,,-542,,,,,,,-542,-542',
'-542,,,-542,-542,-542,,-542,,,,,,-542,,,,-542,,,-542,,,,,265,-542,-542',
'-542,,-542,-542,-542,-542,-542,,,,,,,,,,,,,-542,,,,,,,,,,,,,-542,,-542',
',,-542,,,,-542,,,,,,,-542,,,,,265,-542,,,,,,,,,,,,,,,,,,,,,-542,,,,',
',,,,,,,,-542,,-542,,,-542,156,167,157,180,153,173,163,162,188,191,178',
'161,160,155,181,189,190,165,154,168,172,174,166,159,,,,175,182,177,176',
'169,179,164,152,171,170,183,184,185,186,187,151,158,149,150,147,148',
',111,113,,,112,,,,,,,,,142,143,,139,121,122,123,130,127,129,,,124,125',
',,,144,145,131,132,,,,,,,,,,,,,136,135,,120,141,138,137,133,134,128',
'126,118,140,119,,,146,192,,,,,,,,,,80,156,167,157,180,153,173,163,162',
'188,191,178,161,160,155,181,189,190,165,154,168,172,174,166,159,,,,175',
'182,177,176,169,179,164,152,171,170,183,184,185,186,187,151,158,149',
'150,147,148,,111,113,,,112,,,,,,,,,142,143,,139,121,122,123,130,127',
'129,,,124,125,,,,144,145,131,132,,,,,,,,,,,,,136,135,,120,141,138,137',
'133,134,128,126,118,140,119,,,146,192,,,,,,,,,,80,156,167,157,180,153',
'173,163,162,188,191,178,161,160,155,181,189,190,165,154,168,172,174',
'166,159,,,,175,182,177,176,169,179,164,152,171,170,183,184,185,186,187',
'151,158,149,150,147,148,,111,113,110,,112,,,,,,,,,142,143,,139,121,122',
'123,130,127,129,,,124,125,,,,144,145,131,132,,,,,,,,,,,,,136,135,,120',
'141,138,137,133,134,128,126,118,140,119,,,146,192,,,,,,,,,,80,156,167',
'157,180,153,173,163,162,188,191,178,161,160,155,181,189,190,165,154',
'168,172,174,166,159,,,,175,182,177,176,169,179,164,152,171,170,183,184',
'185,186,187,151,158,149,150,147,148,,111,113,,,112,,,,,,,,,142,143,',
'139,121,122,123,130,127,129,,,124,125,,,,144,145,131,132,,,,,,,,,,,',
',136,135,,120,141,138,137,133,134,128,126,118,140,119,,,146,192,,,,',
',,,,,80,156,167,157,180,153,173,163,162,188,191,178,161,160,155,181',
'189,190,165,154,168,172,174,166,159,,,,175,182,177,373,372,374,371,152',
'171,170,183,184,185,186,187,151,158,149,150,369,370,,367,113,86,85,368',
',88,,,,,,,142,143,,139,121,122,123,130,127,129,,,124,125,,,,144,145',
'131,132,,,,,,378,,,,,,,136,135,,120,141,138,137,133,134,128,126,118',
'140,119,,,146,156,167,157,180,153,173,163,162,188,191,178,161,160,155',
'181,189,190,165,154,168,172,174,166,159,,,,175,182,177,176,169,179,164',
'152,171,170,183,184,185,186,187,151,158,149,150,147,148,,111,113,395',
'394,112,,396,,,,,,,142,143,,139,121,122,123,130,127,129,,,124,125,,',
',144,145,131,132,,,,,,,,,,,,,136,135,,120,141,138,137,133,134,128,126',
'118,140,119,,,146,156,167,157,180,153,173,163,162,188,191,178,161,160',
'155,181,189,190,165,154,168,172,174,166,159,,,,175,182,177,176,169,179',
'164,152,171,170,183,184,185,186,187,151,158,149,150,147,148,,111,113',
',,112,,,,,,,,,142,143,,139,121,122,123,130,127,129,,,124,125,,,,144',
'145,131,132,,,,,,,,,,,,,136,135,,120,141,138,137,133,134,128,126,118',
'140,119,,,146,156,167,157,180,153,173,163,162,188,191,178,161,160,155',
'181,189,190,165,154,168,172,174,166,159,,,,175,182,177,176,169,179,164',
'152,171,170,183,184,185,186,187,151,158,149,150,147,148,,111,113,395',
'394,112,,396,,,,,,,142,143,,139,121,122,123,130,127,129,,,124,125,,',
',144,145,131,132,,,,,,,,,,,,,136,135,,120,141,138,137,133,134,128,126',
'118,140,119,426,430,146,,427,,,,,,,,,142,143,,139,121,122,123,130,127',
'129,,,124,125,,,,144,145,131,132,,,,,,265,,,,,,,136,135,,120,141,138',
'137,133,134,128,126,118,140,119,487,430,146,,488,,,,,,,,,142,143,,139',
'121,122,123,130,127,129,,,124,125,,,,144,145,131,132,,,,,,,,,,,,,136',
'135,,120,141,138,137,133,134,128,126,118,140,119,487,430,146,,488,,',
',,,,,,142,143,,139,121,122,123,130,127,129,,,124,125,,,,144,145,131',
'132,,,,,,,,,,,,,136,135,,120,141,138,137,133,134,128,126,118,140,119',
'672,430,146,,673,,,,,,,,,142,143,,139,121,122,123,130,127,129,,,124',
'125,,,,144,145,131,132,,,,,,265,,,,,,,136,135,,120,141,138,137,133,134',
'128,126,118,140,119,629,430,146,,630,,,,,,,,,142,143,,139,121,122,123',
'130,127,129,,,124,125,,,,144,145,131,132,,,,,,265,,,,,,,136,135,,120',
'141,138,137,133,134,128,126,118,140,119,631,436,146,,632,,,,,,,,,142',
'143,,139,121,122,123,130,127,129,,,124,125,,,,144,145,131,132,,,,,,',
',,,,,,136,135,,120,141,138,137,133,134,128,126,118,140,119,717,430,146',
',718,,,,,,,,,142,143,,139,121,122,123,130,127,129,,,124,125,,,,144,145',
'131,132,,,,,,265,,,,,,,136,135,,120,141,138,137,133,134,128,126,118',
'140,119,724,436,146,,871,,,,,,,,,142,143,,139,121,122,123,130,127,129',
',,124,125,,,,144,145,131,132,,,,,,,,,,,,,136,135,,120,141,138,137,133',
'134,128,126,118,140,119,719,436,146,,720,,,,,,,,,142,143,,139,121,122',
'123,130,127,129,,,124,125,,,,144,145,131,132,,,,,,,,,,,,,136,135,,120',
'141,138,137,133,134,128,126,118,140,119,432,436,146,,434,,,,,,,,,142',
'143,,139,121,122,123,130,127,129,,,124,125,,,,144,145,131,132,,,,,,',
',,,,,,136,135,,120,141,138,137,133,134,128,126,118,140,119,487,430,146',
',488,,,,,,,,,142,143,,139,121,122,123,130,127,129,,,124,125,,,,144,145',
'131,132,,,,,,,,,,,,,136,135,,120,141,138,137,133,134,128,126,118,140',
'119,487,430,146,,488,,,,,,,,,142,143,,139,121,122,123,130,127,129,,',
'124,125,,,,144,145,131,132,,,,,,,,,,,,,136,135,,120,141,138,137,133',
'134,128,126,118,140,119,629,430,146,,630,,,,,,,,,142,143,,139,121,122',
'123,130,127,129,,,124,125,,,,144,145,131,132,,,,,,265,,,,,,,136,135',
',120,141,138,137,133,134,128,126,118,140,119,939,430,146,,940,,,,,,',
',,142,143,,139,121,122,123,130,127,129,,,124,125,,,,144,145,131,132',
',,,,,265,,,,,,,136,135,,120,141,138,137,133,134,128,126,118,140,119',
'631,436,146,,632,,,,,,,,,142,143,,139,121,122,123,130,127,129,,,124',
'125,,,,144,145,131,132,,,,,,,,,,,,,136,135,,120,141,138,137,133,134',
'128,126,118,140,119,724,436,146,,722,,,,,,,,,142,143,,139,121,122,123',
'130,127,129,,,124,125,,,,144,145,131,132,,,,,,,,,,,,,136,135,,120,141',
'138,137,133,134,128,126,118,140,119,941,436,146,,942,,,,,,,,,142,143',
',139,121,122,123,130,127,129,,,124,125,,,,144,145,131,132,,,,,,,,,,',
',,136,135,,120,141,138,137,133,134,128,126,118,140,119,487,430,146,',
'488,,,,,,,,,142,143,,139,121,122,123,130,127,129,,,124,125,,,,144,145',
'131,132,,,,,,265,,,,,,,136,135,,120,141,138,137,133,134,128,126,118',
'140,119,675,436,146,,676,,,,,,,,,142,143,,139,121,122,123,130,127,129',
',,124,125,,,,144,145,131,132,,,,,,,,,,,,,136,135,,120,141,138,137,133',
'134,128,126,118,140,119,,,146' ]
        racc_action_table = arr = ::Array.new(23675, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,0,0,0,875,719,720,0,0,888,729,729,0,669,0,0,0,0,0,0,0,772,662,842',
'605,389,0,0,0,0,0,0,0,718,842,0,384,83,83,384,490,0,0,0,0,0,0,354,0',
'0,0,0,0,55,0,0,0,501,0,0,674,0,0,569,659,363,842,842,667,318,772,719',
'720,490,307,307,594,594,940,351,37,37,941,0,605,605,0,389,344,0,501',
'385,0,605,0,939,384,384,0,729,445,821,842,823,729,667,0,577,868,719',
'720,0,0,0,0,0,0,875,345,875,0,0,875,673,717,513,513,513,0,513,822,0',
'677,513,513,0,0,718,513,55,513,513,513,513,513,513,513,552,552,445,630',
'354,513,513,513,513,513,513,513,500,941,513,569,307,569,594,314,569',
'513,314,363,513,513,318,513,513,513,513,513,513,513,513,513,351,513',
'513,388,513,513,363,673,940,500,940,363,941,940,941,494,630,941,344',
'823,344,823,494,344,823,939,513,939,577,513,939,821,513,821,821,513',
'821,513,868,672,868,513,675,868,673,717,704,704,345,513,345,822,673',
'345,513,513,513,513,513,513,110,568,494,513,513,110,110,290,511,511',
'511,513,511,26,513,284,511,511,513,513,358,511,284,511,511,511,511,511',
'511,511,629,834,682,682,359,511,511,511,511,511,511,511,834,784,511',
'680,672,391,675,675,784,511,380,453,511,511,681,511,511,511,511,511',
'905,511,511,511,209,511,511,905,284,382,290,358,834,834,275,733,26,629',
'358,275,733,672,453,358,675,682,453,453,784,672,511,290,675,511,71,207',
'511,26,568,511,568,355,71,568,358,391,391,391,834,840,380,380,380,209',
'840,905,683,904,511,511,511,511,511,511,904,840,358,511,511,382,382',
'382,522,522,522,511,522,386,511,373,522,522,511,511,207,522,373,522',
'522,522,522,522,522,522,353,840,840,840,840,522,522,522,522,522,522',
'522,287,407,522,42,477,618,904,287,297,522,42,688,522,522,807,522,522',
'522,522,522,689,522,522,522,692,522,522,840,522,522,694,386,386,386',
'285,695,13,477,25,350,367,285,695,13,579,25,618,367,696,297,522,579',
'697,522,618,287,522,297,42,522,807,807,807,807,687,522,698,687,374,919',
'701,449,449,522,919,374,654,352,522,522,522,522,522,522,352,919,653',
'522,522,285,695,13,523,523,523,522,523,370,522,579,523,523,522,522,370',
'523,706,523,523,523,523,523,523,523,712,919,919,919,919,523,523,523',
'523,523,523,523,449,372,523,928,368,714,352,416,372,523,928,368,523',
'523,14,523,523,523,523,523,413,523,523,523,716,523,523,919,523,523,419',
'416,416,416,416,416,416,416,416,416,416,416,722,416,416,361,3,416,416',
'722,523,3,361,523,722,14,523,643,928,523,426,342,416,14,416,523,416',
'416,416,416,416,416,416,523,416,837,837,427,523,523,523,523,523,523',
'791,339,300,523,523,206,416,791,416,300,727,523,206,722,523,727,361',
'426,523,523,505,505,505,505,505,426,751,751,505,505,751,751,751,505',
'427,505,505,505,505,505,505,505,427,311,15,15,311,505,505,505,505,505',
'505,505,348,791,505,300,641,348,206,634,505,505,327,505,505,505,35,505',
'505,505,505,505,516,505,505,505,724,505,505,516,505,505,725,634,634',
'634,634,634,634,634,634,634,634,634,676,634,634,907,326,634,634,676',
'505,371,907,505,676,35,505,310,371,505,310,505,634,35,634,505,634,634',
'634,634,634,634,634,505,634,516,293,293,505,505,505,505,505,505,942',
'376,947,505,505,421,634,942,376,947,505,505,942,676,505,349,907,349',
'505,505,524,524,524,472,524,369,587,324,524,524,323,587,369,524,425',
'524,524,524,524,524,524,524,5,5,5,5,5,524,524,524,524,524,524,524,472',
'942,524,947,472,472,472,472,914,524,914,315,524,524,633,524,524,524',
'524,524,736,524,524,524,433,524,524,740,524,524,741,476,476,476,476',
'476,476,476,476,476,476,476,743,476,476,343,343,476,476,744,524,929',
'929,524,745,747,524,313,750,524,626,312,476,621,476,524,476,476,476',
'476,476,476,476,524,476,757,455,309,524,524,524,524,524,524,546,302',
'299,524,524,298,476,476,499,499,499,524,499,616,524,456,499,499,524',
'524,292,499,289,499,499,499,499,499,499,499,276,276,276,276,276,499',
'499,499,499,499,499,499,609,288,499,775,546,546,546,546,776,499,779',
'782,499,499,783,499,499,499,499,499,457,499,499,499,785,499,499,286',
'499,499,788,439,439,439,439,439,439,439,439,439,439,439,789,439,439',
'790,281,439,439,794,499,280,797,499,798,499,499,279,458,499,571,813',
'439,499,439,499,439,439,439,439,439,439,439,499,439,277,816,570,499',
'499,499,499,499,499,564,264,253,499,499,250,439,825,528,528,528,499',
'528,828,499,829,528,528,499,499,830,528,249,528,528,528,528,528,528',
'528,666,666,666,666,666,528,528,528,528,528,528,528,559,812,528,812',
'812,812,217,812,211,528,210,555,528,528,852,528,528,528,528,528,853',
'528,528,528,208,528,528,544,528,528,860,679,679,679,679,679,679,679',
'679,679,679,679,861,679,679,193,492,679,679,97,528,871,872,528,493,877',
'528,878,78,528,77,531,679,886,679,528,679,679,679,679,679,679,679,528',
'679,671,891,892,528,528,528,528,528,528,893,894,530,528,528,41,679,529',
'534,534,534,528,534,36,528,495,534,534,528,528,906,534,34,534,534,534',
'534,534,534,534,496,502,20,916,506,534,534,534,534,534,534,534,507,560',
'534,560,560,560,924,560,12,534,11,10,534,534,9,534,534,534,534,534,534',
'534,534,534,520,534,534,933,534,534,935,763,763,763,763,763,763,763',
'763,763,763,763,936,763,763,938,6,763,763,517,534,510,1,534,512,,534',
',,534,,534,763,,763,534,763,763,763,763,763,763,763,534,763,,,,534,534',
'534,534,534,534,,,,534,534,,763,,925,925,925,534,925,,534,,925,925,534',
'534,,925,,925,925,925,925,925,925,925,,,,,,925,925,925,925,925,925,925',
',,925,,,,,,,925,,,925,925,,925,925,925,925,925,925,925,925,925,,925',
'925,,925,925,,761,761,761,761,761,761,761,761,761,761,761,,761,761,',
',761,761,,925,,,925,,,925,,,925,,925,761,,761,925,761,761,761,761,761',
'761,761,925,761,,,,925,925,925,925,925,925,,,,925,925,,761,,537,537',
'537,925,537,,925,,537,537,925,925,,537,,537,537,537,537,537,537,537',
',,,,,537,537,537,537,537,537,537,,,537,,,,,,,537,,,537,537,,537,537',
'537,537,537,537,537,537,537,,537,537,,537,537,,658,658,658,658,658,658',
'658,658,658,658,658,,658,658,,,658,658,,537,,,537,,,537,,454,537,,,658',
',658,537,658,658,658,658,658,658,658,537,658,,,,537,537,537,537,537',
'537,,,,537,537,454,658,,658,454,454,537,,,537,,,,537,537,923,923,923',
'923,923,,,,923,923,,,,923,,923,923,923,923,923,923,923,,,,,,923,923',
'923,923,923,923,923,,,923,,,,,,923,923,,923,923,923,,923,923,923,923',
'923,,923,923,923,,923,923,,923,923,,247,247,247,247,247,247,247,247',
'247,247,247,,247,247,,,247,247,,923,,,923,,,923,,,923,,923,247,,247',
'923,247,247,247,247,247,247,247,923,247,,,,923,923,923,923,923,923,',
',,923,923,,247,,,,,923,,,923,,,,923,923,542,542,542,542,542,,,,542,542',
',,,542,,542,542,542,542,542,542,542,,,,,,542,542,542,542,542,542,542',
',,542,,,,,,542,542,,542,542,542,,542,542,542,542,542,,542,542,542,,542',
'542,,542,542,,527,527,527,527,527,527,527,527,527,527,527,,527,527,',
',527,527,,542,,,542,,,542,,,542,,542,527,,527,542,527,527,527,527,527',
'527,527,542,527,,,,542,542,542,542,542,542,,,,542,542,,527,,17,17,17',
'542,17,,542,,17,17,542,542,,17,,17,17,17,17,17,17,17,,,,,,17,17,17,17',
'17,17,17,,,17,,,,,,,17,,,17,17,,17,17,17,17,17,,17,17,17,,17,17,,17',
'17,,766,766,766,766,766,766,766,766,766,766,766,,766,766,,,766,766,',
'17,,,17,17,,17,,,17,,,766,,766,17,766,766,766,766,766,766,766,17,766',
',,,17,17,17,17,17,17,,,,17,17,,766,,18,18,18,17,18,,17,,18,18,17,17',
',18,,18,18,18,18,18,18,18,,,,,,18,18,18,18,18,18,18,,,18,,,,,,,18,,',
'18,18,,18,18,18,18,18,,18,18,18,,18,18,,18,18,,768,768,768,768,768,768',
'768,768,768,768,768,,768,768,,,768,768,,18,,,18,,,18,,,18,,,768,,768',
'18,768,768,768,768,768,768,768,18,768,,,,18,18,18,18,18,18,,,,18,18',
',768,,483,483,483,18,483,,18,,483,483,18,18,,483,,483,483,483,483,483',
'483,483,,,,,,483,483,483,483,483,483,483,,,483,,,,,,,483,,,483,483,',
'483,483,483,483,483,,483,483,483,,483,483,,483,483,,773,773,773,773',
'773,773,773,773,773,773,773,,773,773,,,773,773,,483,,,483,,,483,,,483',
',,773,,773,483,773,773,773,773,773,773,773,483,773,,,,483,483,483,483',
'483,483,,,,483,483,,773,,,,,483,,,483,,,,483,483,915,915,915,915,915',
',,,915,915,,,,915,,915,915,915,915,915,915,915,,,,,,915,915,915,915',
'915,915,915,,,915,,,,,,915,915,,915,915,915,,915,915,915,915,915,,915',
'915,915,,915,915,,915,915,,424,424,424,424,424,424,424,424,424,424,424',
',424,424,,,424,424,,915,,,915,,,915,,,915,,915,424,,424,915,424,424',
'424,424,424,424,424,915,424,,,,915,915,915,915,915,915,,,,915,915,,424',
',22,22,22,915,22,,915,,22,22,915,915,,22,,22,22,22,22,22,22,22,,,,,',
'22,22,22,22,22,22,22,,,22,,,,,,,22,,,22,22,,22,22,22,22,22,22,22,22',
'22,,22,22,,22,22,,756,756,756,756,756,756,756,756,756,756,756,,756,756',
',,756,756,,22,,,22,,,22,,,22,,22,756,22,756,22,756,756,756,756,756,756',
'756,22,756,,,,22,22,22,22,22,22,,,,22,22,,756,,23,23,23,22,23,,22,,23',
'23,22,22,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,',
',,,,23,,,23,23,,23,23,23,23,23,23,23,23,23,,23,23,,23,23,,855,855,855',
'855,855,855,855,855,855,855,855,,855,855,,,855,855,,23,,,23,,,23,,,23',
',23,855,23,855,23,855,855,855,855,855,855,855,23,855,,,,23,23,23,23',
'23,23,,,,23,23,,855,,24,24,24,23,24,,23,,24,24,23,23,,24,,24,24,24,24',
'24,24,24,,,,,,24,24,24,24,24,24,24,,,24,,,,,,,24,,,24,24,,24,24,24,24',
'24,24,24,24,24,,24,24,,24,24,,19,19,19,19,19,19,19,19,19,19,19,,19,19',
',,19,19,,24,,,24,,,24,,,24,,24,19,24,19,24,19,19,19,19,19,19,19,24,19',
',,,24,24,24,24,24,24,,,,24,24,,19,,,,,24,,,24,,,,24,24,910,910,910,910',
'910,,,,910,910,,,,910,,910,910,910,910,910,910,910,,,,,,910,910,910',
'910,910,910,910,,335,910,335,335,335,,335,910,910,,910,910,910,,910',
'910,910,910,910,,910,910,910,,910,910,,910,910,,557,,557,557,557,,557',
'702,335,702,702,702,,702,,,335,,,910,,,910,,,910,,,910,,910,,,,910,',
',550,557,550,550,550,910,550,,702,557,910,910,910,910,910,910,702,,',
'910,910,,,,481,481,481,910,481,,910,,481,481,910,910,,481,550,481,481',
'481,481,481,481,481,550,550,550,550,,481,481,481,481,481,481,481,,473',
'481,,,,,,,481,,,481,481,,481,481,481,481,481,481,481,481,481,,481,481',
',481,481,,464,473,,,,473,473,473,473,,,,,,,,464,464,,481,,,481,,,481',
',,481,,,464,481,464,481,464,464,464,464,,,464,481,464,,,,481,481,481',
'481,481,481,,,,481,481,,,,479,479,479,481,479,,481,,479,479,481,481',
',479,,479,479,479,479,479,479,479,,,,,,479,479,479,479,479,479,479,',
',479,,,,,,,479,,,479,479,,479,479,479,479,479,479,479,479,479,,479,479',
',479,479,,451,451,451,451,451,451,451,451,451,451,451,,451,451,,,451',
'451,,479,,,479,,,479,,,479,,479,451,479,451,479,451,451,451,451,451',
'451,451,479,451,,,,479,479,479,479,479,479,,,,479,479,,,,,,,479,,,479',
',,,479,479,543,543,543,543,543,,,,543,543,,,,543,,543,543,543,543,543',
'543,543,,,,,,543,543,543,543,543,543,543,,,543,,,,,,543,543,,543,543',
'543,,543,543,543,543,543,,543,543,543,,543,543,,543,543,,475,475,475',
'475,475,475,475,475,,475,475,,,,,,475,475,,543,,,543,,,543,,,543,,543',
'475,,475,543,475,475,475,475,475,475,475,543,475,,,,543,543,543,543',
'543,543,,,,543,543,,,,,,,543,,,543,,,,543,543,30,30,30,30,30,,,,30,30',
',,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,30,30',
',30,30,30,,30,30,30,30,30,,30,30,30,,30,30,,30,30,,452,452,452,452,452',
'452,452,452,452,452,452,,452,452,,,452,452,,30,,,30,,,30,,,30,,30,452',
',452,30,452,452,452,452,452,452,452,30,452,,,,30,30,30,30,30,30,,,,30',
'30,,,,31,31,31,30,31,,30,,31,31,30,30,,31,,31,31,31,31,31,31,31,,,,',
',31,31,31,31,31,31,31,,,31,,,,,,,31,,,31,31,,31,31,31,31,31,,31,31,31',
',31,31,638,,638,638,638,461,638,,,,,,,,,,,,,,,461,461,31,,,31,,,31,',
',31,,31,,461,,638,,461,461,461,461,,,638,638,638,638,,31,31,31,31,31',
'31,638,,,31,31,,,,32,32,32,31,32,,31,,32,32,31,31,,32,,32,32,32,32,32',
'32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,,32,32,32,32,32',
',32,32,32,,32,32,590,,590,590,590,590,590,,,,,,,,,,590,,,,,,,32,,,32',
',,32,,,32,,,,,,590,590,,,,,,,590,590,590,590,,32,32,32,32,32,32,,,,32',
'32,,,,32,,,32,,,32,,,,32,32,549,549,549,,549,,,590,549,549,,,,549,,549',
'549,549,549,549,549,549,,,,,,549,549,549,549,549,549,549,,,549,,,,,',
',549,,,549,549,,549,549,549,549,549,,549,549,549,,549,549,897,,897,897',
'897,897,897,,,,,,,,,,897,,,,,,,549,,,549,,,549,,,549,,,,,,897,897,,',
',,,,897,897,897,897,,549,549,549,549,549,549,,,,549,549,,,,,,,549,,',
'549,,,,549,549,563,563,563,563,563,,,897,563,563,,,,563,,563,563,563',
'563,563,563,563,,,,,,563,563,563,563,563,563,563,,,563,,,,,,563,563',
',563,563,563,,563,563,563,563,563,,563,563,563,,563,563,,563,563,,465',
',,,,,,,,,,,,,,,465,465,,563,,,563,,,563,,,563,,563,465,,465,563,465',
'465,465,465,,,465,563,465,,,,563,563,563,563,563,563,,,,563,563,,,,',
',,563,,,563,,,,563,563,567,567,567,567,567,,,,567,567,,,,567,,567,567',
'567,567,567,567,567,,,,,,567,567,567,567,567,567,567,,,567,,,,,,567',
'567,,567,567,567,,567,567,567,567,567,,567,567,567,,567,567,,567,567',
',474,474,474,474,474,474,474,,,474,474,,,,,,474,474,,567,,,567,,,567',
',,567,,567,474,,474,567,474,474,474,474,474,474,474,567,474,,,,567,567',
'567,567,567,567,,,,567,567,,,,,,,567,,,567,,,,567,567,903,903,903,903',
'903,,,,903,903,,,,903,,903,903,903,903,903,903,903,,,,,,903,903,903',
'903,903,903,903,,,903,,,,,,903,903,,903,903,903,,903,903,903,903,903',
',903,903,903,,903,903,,903,903,,463,,,,,,,,,,,,,,,,463,463,,903,,,903',
',,903,,,903,,903,463,,463,903,463,463,463,463,,,463,903,463,,,,903,903',
'903,903,903,903,,,,903,903,,,,38,38,38,903,38,,903,,38,38,903,903,,38',
',38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38',
',38,38,38,38,38,,38,38,38,,38,38,,38,38,,466,,,,,,,,,,,,,,,,466,466',
',38,,,38,,,38,,,38,,,466,,466,38,466,466,466,466,,,466,38,466,,,,38',
'38,38,38,38,38,,,,38,38,,,,39,39,39,38,39,,38,,39,39,38,38,,39,,39,39',
'39,39,39,39,39,,,,,,39,39,39,39,39,39,39,,,39,,,,,,,39,,,39,39,,39,39',
'39,39,39,,39,39,39,,39,39,,39,39,,467,467,467,467,467,467,467,,,467',
'467,,,,,,467,467,,39,,,39,,,39,,,39,,,467,,467,39,467,467,467,467,467',
'467,467,39,467,,,,39,39,39,39,39,39,,,,39,39,,,,40,40,40,39,40,,39,',
'40,40,39,39,,40,,40,40,40,40,40,40,40,,,,,,40,40,40,40,40,40,40,,,40',
',,,,,,40,,,40,40,,40,40,40,40,40,,40,40,40,,40,40,,40,40,,471,471,471',
'471,471,471,471,,,471,471,,,,,,471,471,,40,,,40,,,40,,,40,,,471,,471',
'40,471,471,471,471,471,471,471,40,471,,,,40,40,40,40,40,40,,,,40,40',
',,,901,901,901,40,901,,40,,901,901,40,40,,901,,901,901,901,901,901,901',
'901,,,,,,901,901,901,901,901,901,901,,,901,,,,,,,901,,,901,901,,901',
'901,901,901,901,,901,901,901,,901,901,,901,901,,462,462,462,462,462',
'462,462,,,462,462,,,,,,462,462,,901,,,901,,,901,,,901,,901,462,901,462',
'901,462,462,462,462,462,462,462,901,462,,,,901,901,901,901,901,901,',
',,901,901,,,,,,,901,,,901,,,,901,901,572,572,572,572,572,,,,572,572',
',,,572,,572,572,572,572,572,572,572,,,,,,572,572,572,572,572,572,572',
',,572,,,,,,572,572,,572,572,572,,572,572,572,572,572,,572,572,572,,572',
'572,,572,572,,468,468,468,468,468,468,468,,,468,468,,,,,,468,468,,572',
',,572,,,572,,,572,,572,468,,468,572,468,468,468,468,468,468,468,572',
'468,,,,572,572,572,572,572,572,,,,572,572,,,,574,574,574,572,574,,572',
',574,574,572,572,,574,,574,574,574,574,574,574,574,,,,,,574,574,574',
'574,574,574,574,,,574,,,,,,,574,,,574,574,,574,574,574,574,574,574,574',
'574,574,,574,574,,574,574,,470,470,470,470,470,470,470,,,470,470,,,',
',,470,470,,574,,,574,,,574,,,574,,574,470,,470,574,470,470,470,470,470',
'470,470,574,470,,,,574,574,574,574,574,574,,,,574,574,,,,52,52,52,574',
'52,,574,,52,52,574,574,,52,,52,52,52,52,52,52,52,,,,,,52,52,52,52,52',
'52,52,,,52,,,,,,,52,,,52,52,,52,52,52,52,52,,52,52,52,,52,52,,52,52',
',469,469,469,469,469,469,469,,,469,469,,,,,,469,469,,52,,,52,,,52,,',
'52,,,469,,469,52,469,469,469,469,469,469,469,52,469,,,,52,52,52,52,52',
'52,,,,52,52,,,,53,53,53,52,53,,52,,53,53,52,52,,53,,53,53,53,53,53,53',
'53,,,,,,53,53,53,53,53,53,53,,,53,,,,,,,53,,,53,53,,53,53,53,53,53,53',
'53,53,53,,53,53,,53,53,,459,,,,,,,,,,,,,,,,459,459,,53,,,53,,,53,,,53',
',53,459,,459,53,459,459,459,459,,,,53,,,,,53,53,53,53,53,53,,,,53,53',
',,,54,54,54,53,54,,53,,54,54,53,53,,54,,54,54,54,54,54,54,54,,,,,,54',
'54,54,54,54,54,54,,,54,,,,,,,54,,,54,54,,54,54,54,54,54,54,54,54,54',
',54,54,,54,54,,460,,,,,,,,,,,,,,,,460,460,,54,,,54,,,54,,,54,,,460,',
'460,54,460,460,460,460,,,,54,,,,,54,54,54,54,54,54,,,,54,54,,,,582,582',
'582,54,582,,54,,582,582,54,54,,582,,582,582,582,582,582,582,582,,,,',
',582,582,582,582,582,582,582,,,582,,,,,,,582,,,582,582,,582,582,582',
'582,582,582,582,582,582,,582,582,,582,582,,,,,,,,,,,,,,,,,,,,,582,,',
'582,,,582,,,582,,582,,,,582,,,,,,,,582,,,,,582,582,582,582,582,582,',
',,582,582,,,,586,586,586,582,586,,582,,586,586,582,582,,586,,586,586',
'586,586,586,586,586,,,,,,586,586,586,586,586,586,586,,,586,,,,,,,586',
',,586,586,,586,586,586,586,586,,586,586,586,,586,586,,586,586,,,,,,',
',,,,,,,,,,,,,,586,,,586,,,586,,,586,,,,,,586,,,,,,,,586,,,,,586,586',
'586,586,586,586,,,,586,586,,,,57,57,57,586,57,,586,,57,57,586,586,,57',
',57,57,57,57,57,57,57,,,,,,57,57,57,57,57,57,57,,,57,,,,,,,57,,,57,57',
',57,57,57,57,57,,57,57,57,,57,57,,57,57,,,,,,,,,,,,,,,,,,,,,57,,,57',
',,57,,,57,,,,,,57,,,,,,,,57,,,,,57,57,57,57,57,57,,,,57,57,,,,58,58',
'58,57,58,,57,,58,58,57,57,,58,,58,58,58,58,58,58,58,,,,,,58,58,58,58',
'58,58,58,,,58,,,,,,,58,,,58,58,,58,58,58,58,58,,58,58,58,,58,58,,58',
'58,,,,,,,,,,,,,,,,,,,,,58,,,58,,,58,,,58,,,,,,58,,,,,,,,58,,,,,58,58',
'58,58,58,58,,,,58,58,,,,61,61,61,58,61,,58,,61,61,58,58,,61,,61,61,61',
'61,61,61,61,,,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,,61,61,61',
'61,61,,61,61,61,,61,61,,61,61,,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,,,61',
',,,,,61,,,,,,,,61,,,,,61,61,61,61,61,61,,,,61,61,61,,,,,61,61,,,61,',
',,61,61,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62',
'62,62,62,62,62,,,62,,,,,,,62,,,62,62,,62,62,62,62,62,,62,62,62,,62,62',
'319,,319,319,319,,319,,,,,,,,,,,,,,,,,62,,,62,,,62,,,62,,62,,,,319,',
'319,,,,,,319,319,319,319,,62,62,62,62,62,62,,,,62,62,,,,63,63,63,62',
'63,,62,,63,63,62,62,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63',
'63,,,63,,,,,,,63,,,63,63,,63,63,63,63,63,,63,63,63,,63,63,56,,56,56',
'56,,56,,,,,,,,,,,,,,63,,,63,,,63,,,63,,,63,,,,,,56,56,,,,,,,56,56,56',
'56,,63,63,63,63,63,63,,,,63,63,,,,588,588,588,63,588,,63,,588,588,63',
'63,,588,,588,588,588,588,588,588,588,,,,,,588,588,588,588,588,588,588',
',,588,,,,,,,588,,,588,588,,588,588,588,588,588,,588,588,588,,588,588',
',588,588,,,,,,,,,,,,,,,,,,,,,588,,,588,,,588,,,588,,,,,,588,,,,,,,,588',
',,,,588,588,588,588,588,588,,,,588,588,,,,,,,588,,,588,,,,588,588,883',
'883,883,883,883,,,,883,883,,,,883,,883,883,883,883,883,883,883,,,,,',
'883,883,883,883,883,883,883,,,883,,,,,,883,883,,883,883,883,,883,883',
'883,883,883,,883,883,883,,883,883,,883,883,,,,,,,,,,,,,,,,,,,,,883,',
',883,,,883,,,883,,883,,,,883,,,,,,,,883,,,,,883,883,883,883,883,883',
',,,883,883,,,,,,,883,,,883,,,,883,883,880,880,880,880,880,,,,880,880',
',,,880,,880,880,880,880,880,880,880,,,,,,880,880,880,880,880,880,880',
',,880,,,,,,880,880,,880,880,880,,880,880,880,880,880,,880,880,880,,880',
'880,,880,880,,,,,,,,,,,,,,,,,,,,,880,,,880,,,880,,,880,,880,,,,880,',
',,,,,,880,,,,,880,880,880,880,880,880,,,,880,880,,,,879,879,879,880',
'879,,880,,879,879,880,880,,879,,879,879,879,879,879,879,879,,,,,,879',
'879,879,879,879,879,879,,,879,,,,,,,879,,,879,879,,879,879,879,879,879',
',879,879,879,,879,879,,879,879,,,,,,,,,,,,,,,,,,,,,879,,,879,,,879,',
',879,,879,,,,879,,,,,,,,879,,,,,879,879,879,879,879,879,,,,879,879,',
',,615,615,615,879,615,,879,,615,615,879,879,,615,,615,615,615,615,615',
'615,615,,,,,,615,615,615,615,615,615,615,,,615,,,,,,,615,,,615,615,',
'615,615,615,615,615,,615,615,615,,615,615,,615,615,,,,,,,,,,,,,,,,,',
',,,615,,,615,,,615,,,615,,,,,,615,,,,,,,,615,,,,,615,615,615,615,615',
'615,,,,615,615,,,,617,617,617,615,617,,615,,617,617,615,615,,617,,617',
'617,617,617,617,617,617,,,,,,617,617,617,617,617,617,617,,,617,,,,,',
',617,,,617,617,,617,617,617,617,617,,617,617,617,,617,617,,617,617,',
',,,,,,,,,,,,,,,,,,,617,,,617,,,617,,,617,,617,,,,617,,,,,,,,617,,,,',
'617,617,617,617,617,617,,,,617,617,,,,619,619,619,617,619,,617,,619',
'619,617,617,,619,,619,619,619,619,619,619,619,,,,,,619,619,619,619,619',
'619,619,,,619,,,,,,,619,,,619,619,,619,619,619,619,619,,619,619,619',
',619,619,,619,619,,,,,,,,,,,,,,,,,,,,,619,,,619,,,619,,,619,,,,,,619',
',,,,,,,619,,,,,619,619,619,619,619,619,,,,619,619,,,,620,620,620,619',
'620,,619,,620,620,619,619,,620,,620,620,620,620,620,620,620,,,,,,620',
'620,620,620,620,620,620,,,620,,,,,,,620,,,620,620,,620,620,620,620,620',
',620,620,620,,620,620,,620,620,,,,,,,,,,,,,,,,,,,,,620,,,620,,,620,',
',620,,,,,,620,,,,,,,,620,,,,,620,620,620,620,620,620,,,,620,620,,,,869',
'869,869,620,869,,620,,869,869,620,620,,869,,869,869,869,869,869,869',
'869,,,,,,869,869,869,869,869,869,869,,,869,,,,,,,869,,,869,869,,869',
'869,869,869,869,,869,869,869,,869,869,732,,732,732,732,732,732,,,,,',
',,,,732,,,,,,,869,,,869,,,869,,,869,,,,,,732,,,,,,,,732,732,732,732',
',869,869,869,869,869,869,,,,869,869,,,,,,,869,,,869,,,,869,869,99,99',
'99,99,99,,,732,99,99,,,,99,,99,99,99,99,99,99,99,,,,,,99,99,99,99,99',
'99,99,,,99,,,,,,99,99,99,99,99,99,,99,99,99,99,99,,99,99,99,,99,99,',
'99,99,,,,,,,,,,,,,,,,,,,,,99,,,99,,,99,,,99,,99,,,,99,,,,,,,,99,,,,',
'99,99,99,99,99,99,,,,99,99,,,,,,99,99,,,99,,,,99,99,103,103,103,,103',
',,,103,103,,,,103,,103,103,103,103,103,103,103,,,,,,103,103,103,103',
'103,103,103,,,103,,,,,,,103,,,103,103,,103,103,103,103,103,,103,103',
'103,,103,103,,103,103,,,,,,,,,,,,,,,,,,,,,103,,,103,,,103,,,103,,,,',
',103,,,,,,,,103,,,,,103,103,103,103,103,103,,,,103,103,,,,104,104,104',
'103,104,,103,,104,104,103,103,,104,,104,104,104,104,104,104,104,,,,',
',104,104,104,104,104,104,104,,,104,,,,,,,104,,,104,104,,104,104,104',
'104,104,,104,104,104,,104,104,,104,104,,,,,,,,,,,,,,,,,,,,,104,,,104',
',,104,,,104,,,,,,104,,,,,,,,104,,,,,104,104,104,104,104,104,,,,104,104',
',,,105,105,105,104,105,,104,,105,105,104,104,,105,,105,105,105,105,105',
'105,105,,,,,,105,105,105,105,105,105,105,,,105,,,,,,,105,,,105,105,',
'105,105,105,105,105,,105,105,105,,105,105,,105,105,,,,,,,,,,,,,,,,,',
',,,105,,,105,,,105,,,105,,,,,,105,,,,,,,,105,,,,,105,105,105,105,105',
'105,,,,105,105,,,,106,106,106,105,106,,105,,106,106,105,105,,106,,106',
'106,106,106,106,106,106,,,,,,106,106,106,106,106,106,106,,,106,,,,,',
',106,,,106,106,,106,106,106,106,106,,106,106,106,,106,106,,106,106,',
',,,,,,,,,,,,,,,,,,,106,,,106,,,106,,,106,,,,,,106,,,,,,,,106,,,,,106',
'106,106,106,106,106,,,,106,106,,,,,,,106,,,106,,,,106,106,107,107,107',
'107,107,,,,107,107,,,,107,,107,107,107,107,107,107,107,,,,,,107,107',
'107,107,107,107,107,,,107,,,,,,107,107,,107,107,107,,107,107,107,107',
'107,,107,107,107,,107,107,,107,107,,,,,,,,,,,,,,,,,,,,,107,,,107,,,107',
',,107,,107,,,,107,,,,,,,,107,,,,,107,107,107,107,107,107,,,,107,107',
',,,,,,107,,,107,,,,107,107,108,108,108,108,108,,,,108,108,,,,108,,108',
'108,108,108,108,108,108,,,,,,108,108,108,108,108,108,108,,,108,,,,,',
'108,108,108,108,108,108,,108,108,108,108,108,,108,108,108,,108,108,',
'108,108,,,,,,,,,,,,,,,,,,,,,108,,,108,,,108,,,108,,108,,,,108,,,,,,',
',108,,,,,108,108,108,108,108,108,,,,108,108,,,,625,625,625,108,625,',
'108,,625,625,108,108,,625,,625,625,625,625,625,625,625,,,,,,625,625',
'625,625,625,625,625,,,625,,,,,,,625,,,625,625,,625,625,625,625,625,',
'625,625,625,,625,625,,625,625,,,,,,,,,,,,,,,,,,,,,625,,,625,,,625,,',
'625,,,,,,625,,,,,,,,625,,,,,625,625,625,625,625,625,,,,625,625,,,,628',
'628,628,625,628,,625,,628,628,625,625,,628,,628,628,628,628,628,628',
'628,,,,,,628,628,628,628,628,628,628,,,628,,,,,,,628,,,628,628,,628',
'628,628,628,628,,628,628,628,,628,628,,628,628,,,,,,,,,,,,,,,,,,,,,628',
',,628,,,628,,,628,,,,,,628,,,,,,,,628,,,,,628,628,628,628,628,628,,',
',628,628,,,,,,,628,,,628,,,,628,628,865,865,865,865,865,,,,865,865,',
',,865,,865,865,865,865,865,865,865,,,,,,865,865,865,865,865,865,865',
',,865,,,,,,865,865,,865,865,865,,865,865,865,865,865,,865,865,865,,865',
'865,,865,865,,,,,,,,,,,,,,,,,,,,,865,,,865,,,865,,,865,,865,,,,865,',
',,,,,,865,,,,,865,865,865,865,865,865,,,,865,865,,,,,,,865,,,865,,,',
'865,865,195,195,195,195,195,,,,195,195,,,,195,,195,195,195,195,195,195',
'195,,,,,,195,195,195,195,195,195,195,,,195,,,,,,195,195,,195,195,195',
',195,195,195,195,195,,195,195,195,,195,195,,195,195,,,,,,,,,,,,,,,,',
',,,,195,,,195,,,195,,,195,,195,,,,195,,,,,,,,195,,,,,195,195,195,195',
'195,195,,,,195,195,,,,196,196,196,195,196,,195,,196,196,195,195,,196',
',196,196,196,196,196,196,196,,,,,,196,196,196,196,196,196,196,,,196',
',,,,,,196,,,196,196,,196,196,196,196,196,,196,196,196,,196,196,,196',
'196,,,,,,,,,,,,,,,,,,,,,196,,,196,,,196,,,196,,196,,,,196,,,,,,,,196',
',,,,196,196,196,196,196,196,,,,196,196,,,,197,197,197,196,197,,196,',
'197,197,196,196,,197,,197,197,197,197,197,197,197,,,,,,197,197,197,197',
'197,197,197,,,197,,,,,,,197,,,197,197,,197,197,197,197,197,,197,197',
'197,,197,197,,197,197,,,,,,,,,,,,,,,,,,,,,197,,,197,,,197,,,197,,197',
',,,197,,,,,,,,197,,,,,197,197,197,197,197,197,,,,197,197,,,,198,198',
'198,197,198,,197,,198,198,197,197,,198,,198,198,198,198,198,198,198',
',,,,,198,198,198,198,198,198,198,,,198,,,,,,,198,,,198,198,,198,198',
'198,198,198,,198,198,198,,198,198,,198,198,,,,,,,,,,,,,,,,,,,,,198,',
',198,,,198,,,198,,,,,,198,,,,,,,,198,,,,,198,198,198,198,198,198,,,',
'198,198,,,,199,199,199,198,199,,198,,199,199,198,198,,199,,199,199,199',
'199,199,199,199,,,,,,199,199,199,199,199,199,199,,,199,,,,,,,199,,,199',
'199,,199,199,199,199,199,199,199,199,199,,199,199,,199,199,,,,,,,,,',
',,,,,,,,,,,199,,,199,,,199,,,199,,199,,,,199,,,,,,,,199,,,,,199,199',
'199,199,199,199,,,,199,199,,,,448,448,448,199,448,,199,,448,448,199',
'199,,448,,448,448,448,448,448,448,448,,,,,,448,448,448,448,448,448,448',
',,448,,,,,,,448,,,448,448,,448,448,448,448,448,,448,448,448,,448,448',
',448,448,,,,,,,,,,,,,,,,,,,,,448,,,448,,,448,,,448,,,,,,448,,,,,,,,448',
',,,,448,448,448,448,448,448,,,,448,448,,,,447,447,447,448,447,,448,',
'447,447,448,448,,447,,447,447,447,447,447,447,447,,,,,,447,447,447,447',
'447,447,447,,,447,,,,,,,447,,,447,447,,447,447,447,447,447,,447,447',
'447,,447,447,,447,447,,,,,,,,,,,,,,,,,,,,,447,,,447,,,447,,,447,,,,',
',447,,,,,,,,447,,,,,447,447,447,447,447,447,,,,447,447,,,,202,202,202',
'447,202,,447,,202,202,447,447,,202,,202,202,202,202,202,202,202,,,,',
',202,202,202,202,202,202,202,,,202,,,,,,,202,,,202,202,,202,202,202',
'202,202,,202,202,202,,202,202,,202,202,,,,,,,,,,,,,,,,,,,,,202,,,202',
',,202,,,202,,,,,,202,,,,,,,,202,,,,,202,202,202,202,202,202,,,,202,202',
',,,203,203,203,202,203,,202,,203,203,202,202,,203,,203,203,203,203,203',
'203,203,,,,,,203,203,203,203,203,203,203,,,203,,,,,,,203,,,203,203,',
'203,203,203,203,203,,203,203,203,,203,203,,203,203,,,,,,,,,,,,,,,,,',
',,,203,,,203,,,203,,,203,,,,,,203,,,,,,,,203,,,,,203,203,203,203,203',
'203,,,,203,203,,,,204,204,204,203,204,,203,,204,204,203,203,,204,,204',
'204,204,204,204,204,204,,,,,,204,204,204,204,204,204,204,,,204,,,,,',
',204,,,204,204,,204,204,204,204,204,,204,204,204,,204,204,,204,204,',
',,,,,,,,,,,,,,,,,,,204,,,204,,,204,,,204,,,,,,204,,,,,,,,204,,,,,204',
'204,204,204,204,204,,,,204,204,,,,446,446,446,204,446,,204,,446,446',
'204,204,,446,,446,446,446,446,446,446,446,,,,,,446,446,446,446,446,446',
'446,,,446,,,,,,,446,,,446,446,,446,446,446,446,446,,446,446,446,,446',
'446,,446,446,,,,,,,,,,,,,,,,,,,,,446,,,446,,,446,,,446,,,,,,446,,,,',
',,,446,,,,,446,446,446,446,446,446,,,,446,446,,,,856,856,856,446,856',
',446,,856,856,446,446,,856,,856,856,856,856,856,856,856,,,,,,856,856',
'856,856,856,856,856,,,856,,,,,,,856,,,856,856,,856,856,856,856,856,',
'856,856,856,,856,856,,856,856,,,,,,,,,,,,,,,,,,,,,856,,,856,,,856,,',
'856,,,,,,856,,,,,,,,856,,,,,856,856,856,856,856,856,,,,856,856,,,,444',
'444,444,856,444,,856,,444,444,856,856,,444,,444,444,444,444,444,444',
'444,,,,,,444,444,444,444,444,444,444,,,444,,,,,,,444,,,444,444,,444',
'444,444,444,444,444,444,444,444,,444,444,,444,444,,,,,,,,,,,,,,,,,,',
',,444,,,444,,,444,,,444,,444,,,,444,,,,,,,,444,,,,,444,444,444,444,444',
'444,,,,444,444,,,,844,844,844,444,844,,444,,844,844,444,444,,844,,844',
'844,844,844,844,844,844,,,,,,844,844,844,844,844,844,844,,,844,,,,,',
',844,,,844,844,,844,844,844,844,844,,844,844,844,,844,844,,844,844,',
',,,,,,,,,,,,,,,,,,,844,,,844,,,844,,,844,,,,,,844,,,,,,,,844,,,,,844',
'844,844,844,844,844,,,,844,844,,,,636,636,636,844,636,,844,,636,636',
'844,844,,636,,636,636,636,636,636,636,636,,,,,,636,636,636,636,636,636',
'636,,,636,,,,,,,636,,,636,636,,636,636,636,636,636,,636,636,636,,636',
'636,,636,636,,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,,,636,,,,,,636,,,,',
',,,636,,,,,636,636,636,636,636,636,,,,636,636,,,,,,,636,,,636,,,,636',
'636,640,640,640,640,640,,,,640,640,,,,640,,640,640,640,640,640,640,640',
',,,,,640,640,640,640,640,640,640,,,640,,,,,,640,640,,640,640,640,,640',
'640,640,640,640,,640,640,640,,640,640,,640,640,,,,,,,,,,,,,,,,,,,,,640',
',,640,,,640,,,640,,640,,,,640,,,,,,,,640,,,,,640,640,640,640,640,640',
',,,640,640,,,,,,,640,,,640,,,,640,640,212,212,212,212,212,,,,212,212',
',,,212,,212,212,212,212,212,212,212,,,,,,212,212,212,212,212,212,212',
',,212,,,,,,212,212,,212,212,212,,212,212,212,212,212,,212,212,212,,212',
'212,,212,212,,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,,,212,,212,,,,212,',
',,,,,,212,,,,,212,212,212,212,212,212,,,,212,212,,,,213,213,213,212',
'213,,212,,213,213,212,212,,213,,213,213,213,213,213,213,213,,,,,,213',
'213,213,213,213,213,213,,,213,,,,,,,213,,,213,213,,213,213,213,213,213',
',213,213,213,,213,213,,213,213,,,,,,,,,,,,,,,,,,,,,213,,,213,,213,213',
',,213,,,,,,213,,,,,,,,213,,,,,213,213,213,213,213,213,,,,213,213,,,',
'216,216,216,213,216,,213,,216,216,213,213,,216,,216,216,216,216,216',
'216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,',
'216,216,216,216,216,,216,216,216,,216,216,,216,216,,,,,,,,,,,,,,,,,',
',,,216,,,216,,,216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216,216,216',
'216,,,,216,216,,,,644,644,644,216,644,,216,,644,644,216,216,,644,,644',
'644,644,644,644,644,644,,,,,,644,644,644,644,644,644,644,,,644,,,,,',
',644,,,644,644,,644,644,644,644,644,,644,644,644,,644,644,,644,644,',
',,,,,,,,,,,,,,,,,,,644,,,644,,,644,,,644,,,,,,644,,,,,,,,644,,,,,644',
'644,644,644,644,644,,,,644,644,,,,218,218,218,644,218,,644,,218,218',
'644,644,,218,,218,218,218,218,218,218,218,,,,,,218,218,218,218,218,218',
'218,,,218,,,,,,,218,,,218,218,,218,218,218,218,218,,218,218,218,,218',
'218,,218,218,,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,,,218,,,,,,218,,,,',
',,,218,,,,,218,218,218,218,218,218,,,,218,218,,,,219,219,219,218,219',
',218,,219,219,218,218,,219,,219,219,219,219,219,219,219,,,,,,219,219',
'219,219,219,219,219,,,219,,,,,,,219,,,219,219,,219,219,219,219,219,',
'219,219,219,,219,219,,219,219,,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,,',
'219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219,,,,220',
'220,220,219,220,,219,,220,220,219,219,,220,,220,220,220,220,220,220',
'220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220,,220',
'220,220,220,220,,220,220,220,,220,220,,220,220,,,,,,,,,,,,,,,,,,,,,220',
',,220,,,220,,,220,,,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,',
',220,220,,,,221,221,221,220,221,,220,,221,221,220,220,,221,,221,221',
'221,221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221',
',,221,221,,221,221,221,221,221,,221,221,221,,221,221,,221,221,,,,,,',
',,,,,,,,,,,,,,221,,,221,,,221,,,221,,,,,,221,,,,,,,,221,,,,,221,221',
'221,221,221,221,,,,221,221,,,,222,222,222,221,222,,221,,222,222,221',
'221,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222,222',
',,222,,,,,,,222,,,222,222,,222,222,222,222,222,,222,222,222,,222,222',
',222,222,,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,,,222,,,,,,222,,,,,,,,222',
',,,,222,222,222,222,222,222,,,,222,222,,,,223,223,223,222,223,,222,',
'223,223,222,222,,223,,223,223,223,223,223,223,223,,,,,,223,223,223,223',
'223,223,223,,,223,,,,,,,223,,,223,223,,223,223,223,223,223,,223,223',
'223,,223,223,,223,223,,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,,,223,,,,',
',223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223,223,,,,224,224,224',
'223,224,,223,,224,224,223,223,,224,,224,224,224,224,224,224,224,,,,',
',224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,,224,224,224',
'224,224,,224,224,224,,224,224,,224,224,,,,,,,,,,,,,,,,,,,,,224,,,224',
',,224,,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224,224',
',,,225,225,225,224,225,,224,,225,225,224,224,,225,,225,225,225,225,225',
'225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225,',
'225,225,225,225,225,,225,225,225,,225,225,,225,225,,,,,,,,,,,,,,,,,',
',,,225,,,225,,,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225,225,225',
'225,,,,225,225,,,,226,226,226,225,226,,225,,226,226,225,225,,226,,226',
'226,226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,',
',226,,,226,226,,226,226,226,226,226,,226,226,226,,226,226,,226,226,',
',,,,,,,,,,,,,,,,,,,226,,,226,,,226,,,226,,,,,,226,,,,,,,,226,,,,,226',
'226,226,226,226,226,,,,226,226,,,,227,227,227,226,227,,226,,227,227',
'226,226,,227,,227,227,227,227,227,227,227,,,,,,227,227,227,227,227,227',
'227,,,227,,,,,,,227,,,227,227,,227,227,227,227,227,,227,227,227,,227',
'227,,227,227,,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,,,227,,,,,,227,,,,',
',,,227,,,,,227,227,227,227,227,227,,,,227,227,,,,228,228,228,227,228',
',227,,228,228,227,227,,228,,228,228,228,228,228,228,228,,,,,,228,228',
'228,228,228,228,228,,,228,,,,,,,228,,,228,228,,228,228,228,228,228,',
'228,228,228,,228,228,,228,228,,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,,',
'228,,,,,,228,,,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228,,,,229',
'229,229,228,229,,228,,229,229,228,228,,229,,229,229,229,229,229,229',
'229,,,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229,229,,229',
'229,229,229,229,,229,229,229,,229,229,,229,229,,,,,,,,,,,,,,,,,,,,,229',
',,229,,,229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,',
',229,229,,,,230,230,230,229,230,,229,,230,230,229,229,,230,,230,230',
'230,230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,,,230',
',,230,230,,230,230,230,230,230,,230,230,230,,230,230,,230,230,,,,,,',
',,,,,,,,,,,,,,230,,,230,,,230,,,230,,,,,,230,,,,,,,,230,,,,,230,230',
'230,230,230,230,,,,230,230,,,,231,231,231,230,231,,230,,231,231,230',
'230,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231,231,231',
',,231,,,,,,,231,,,231,231,,231,231,231,231,231,,231,231,231,,231,231',
',231,231,,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,,,231,,,,,,231,,,,,,,,231',
',,,,231,231,231,231,231,231,,,,231,231,,,,232,232,232,231,232,,231,',
'232,232,231,231,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232',
'232,232,232,,,232,,,,,,,232,,,232,232,,232,232,232,232,232,,232,232',
'232,,232,232,,232,232,,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,,,232,,,,',
',232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232,232,,,,233,233,233',
'232,233,,232,,233,233,232,232,,233,,233,233,233,233,233,233,233,,,,',
',233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,,233,233,233',
'233,233,,233,233,233,,233,233,,233,233,,,,,,,,,,,,,,,,,,,,,233,,,233',
',,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233',
',,,234,234,234,233,234,,233,,234,234,233,233,,234,,234,234,234,234,234',
'234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,',
'234,234,234,234,234,,234,234,234,,234,234,,234,234,,,,,,,,,,,,,,,,,',
',,,234,,,234,,,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,234',
'234,,,,234,234,,,,235,235,235,234,235,,234,,235,235,234,234,,235,,235',
'235,235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,',
',235,,,235,235,,235,235,235,235,235,,235,235,235,,235,235,,235,235,',
',,,,,,,,,,,,,,,,,,,235,,,235,,,235,,,235,,,,,,235,,,,,,,,235,,,,,235',
'235,235,235,235,235,,,,235,235,,,,236,236,236,235,236,,235,,236,236',
'235,235,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236,236,236',
'236,,,236,,,,,,,236,,,236,236,,236,236,236,236,236,,236,236,236,,236',
'236,,236,236,,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,,,236,,,,,,236,,,,',
',,,236,,,,,236,236,236,236,236,236,,,,236,236,,,,237,237,237,236,237',
',236,,237,237,236,236,,237,,237,237,237,237,237,237,237,,,,,,237,237',
'237,237,237,237,237,,,237,,,,,,,237,,,237,237,,237,237,237,237,237,',
'237,237,237,,237,237,,237,237,,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,,',
'237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237,237,,,,238',
'238,238,237,238,,237,,238,238,237,237,,238,,238,238,238,238,238,238',
'238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,,238',
'238,238,238,238,,238,238,238,,238,238,,238,238,,,,,,,,,,,,,,,,,,,,,238',
',,238,,,238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238,238,238,,',
',238,238,,,,239,239,239,238,239,,238,,239,239,238,238,,239,,239,239',
'239,239,239,239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239',
',,239,239,,239,239,239,239,239,,239,239,239,,239,239,,239,239,,,,,,',
',,,,,,,,,,,,,,239,,,239,,,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239',
'239,239,239,239,,,,239,239,,,,240,240,240,239,240,,239,,240,240,239',
'239,,240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240',
',,240,,,,,,,240,,,240,240,,240,240,240,240,240,,240,240,240,,240,240',
',240,240,,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,,,240,,,,,,240,,,,,,,,240',
',,,,240,240,240,240,240,240,,,,240,240,,,,241,241,241,240,241,,240,',
'241,241,240,240,,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241',
'241,241,241,,,241,,,,,,,241,,,241,241,,241,241,241,241,241,,241,241',
'241,,241,241,,241,241,,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,,,241,,,,',
',241,,,,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,,,,242,242,242',
'241,242,,241,,242,242,241,241,,242,,242,242,242,242,242,242,242,,,,',
',242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,,242,242,242',
'242,242,,242,242,242,,242,242,,242,242,,,,,,,,,,,,,,,,,,,,,242,,,242',
',,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242',
',,,243,243,243,242,243,,242,,243,243,242,242,,243,,243,243,243,243,243',
'243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,',
'243,243,243,243,243,,243,243,243,,243,243,,243,243,,,,,,,,,,,,,,,,,',
',,,243,,,243,,,243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243',
'243,,,,243,243,,,,418,418,418,243,418,,243,,418,418,243,243,,418,,418',
'418,418,418,418,418,418,,,,,,418,418,418,418,418,418,418,,,418,,,,,',
',418,,,418,418,,418,418,418,418,418,,418,418,418,,418,418,,418,418,',
',,,,,,,,,,,,,,,,,,,418,,,418,,,418,,,418,,,,,,418,,,,,,,,418,,,,,418',
'418,418,418,418,418,,,,418,418,,,,,,,418,,,418,,,,418,418,651,651,651',
'651,651,,,,651,651,,,,651,,651,651,651,651,651,651,651,,,,,,651,651',
'651,651,651,651,651,,,651,,,,,,651,651,,651,651,651,,651,651,651,651',
'651,,651,651,651,,651,651,,651,651,,,,,,,,,,,,,,,,,,,,,651,,,651,,,651',
',,651,,651,,,,651,,,,,,,,651,,,,,651,651,651,651,651,651,,,,651,651',
',,,657,657,657,651,657,,651,,657,657,651,651,,657,,657,657,657,657,657',
'657,657,,,,,,657,657,657,657,657,657,657,,,657,,,,,,,657,,,657,657,',
'657,657,657,657,657,657,657,657,657,,657,657,,657,657,,,,,,,,,,,,,,',
',,,,,,657,,,657,,,657,,,657,,657,,657,,657,,,,,,,,657,,,,,657,657,657',
'657,657,657,,,,657,657,,,,252,252,252,657,252,,657,,252,252,657,657',
',252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,',
',252,,,,,,,252,,,252,252,,252,252,252,252,252,,252,252,252,,252,252',
',252,252,,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,,,252,,,,,,252,,,,,,,,252',
',,,,252,252,252,252,252,252,,,,252,252,,,,378,378,378,252,378,,252,',
'378,378,252,252,,378,,378,378,378,378,378,378,378,,,,,,378,378,378,378',
'378,378,378,,,378,,,,,,,378,,,378,378,,378,378,378,378,378,,378,378',
'378,,378,378,,378,378,,,,,,,,,,,,,,,,,,,,,378,,,378,,,378,,,378,,,,',
',378,,,,,,,,378,,,,,378,378,378,378,378,378,,,,378,378,,,,254,254,254',
'378,254,,378,,254,254,378,378,,254,,254,254,254,254,254,254,254,,,,',
',254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,,254,254,254',
'254,254,,254,254,254,,254,254,,254,254,,,,,,,,,,,,,,,,,,,,,254,,,254',
',,254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254',
',,,259,259,259,254,259,,254,,259,259,254,254,,259,,259,259,259,259,259',
'259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,',
'259,259,259,259,259,,259,259,259,,259,259,,259,259,,,,,,,,,,,,,,,,,',
',,,259,,,259,,,259,,,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259',
'259,,,,259,259,,,,,,,259,,,259,,,,259,259,663,663,663,663,663,,,,663',
'663,,,,663,,663,663,663,663,663,663,663,,,,,,663,663,663,663,663,663',
'663,,,663,,,,,,663,663,,663,663,663,,663,663,663,663,663,,663,663,663',
',663,663,,663,663,,,,,,,,,,,,,,,,,,,,,663,,,663,,,663,,,663,,663,,,',
'663,,,,,,,,663,,,,,663,663,663,663,663,663,,,,663,663,,,,,,,663,,,663',
',,,663,663,664,664,664,664,664,,,,664,664,,,,664,,664,664,664,664,664',
'664,664,,,,,,664,664,664,664,664,664,664,,,664,,,,,,664,664,,664,664',
'664,,664,664,664,664,664,,664,664,664,,664,664,,664,664,,,,,,,,,,,,',
',,,,,,,,664,,,664,,,664,,,664,,664,,,,664,,,,,,,,664,,,,,664,664,664',
'664,664,664,,,,664,664,,,,668,668,668,664,668,,664,,668,668,664,664',
',668,,668,668,668,668,668,668,668,,,,,,668,668,668,668,668,668,668,',
',668,,,,,,,668,,,668,668,,668,668,668,668,668,,668,668,668,,668,668',
',,,,,,,,,,,,,,,,,,,,,,,668,,,668,,,668,,,668,,,,,,,,,,,,,,,,,,,668,668',
'668,668,668,668,,,,668,668,,,,265,265,265,668,265,,668,,265,265,668',
'668,,265,,265,265,265,265,265,265,265,,,,,,265,265,265,265,265,265,265',
',,265,,,,,,,265,,,265,265,,265,265,265,265,265,265,265,265,265,,265',
'265,,265,265,,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,,,265,,265,,265,,265',
',,,,,,,265,,,,,265,265,265,265,265,265,,,,265,265,,,,266,266,266,265',
'266,,265,,266,266,265,265,,266,,266,266,266,266,266,266,266,,,,,,266',
'266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,,266,266,266,266,266',
'266,266,266,266,,266,266,,266,266,,,,,,,,,,,,,,,,,,,,,266,,,266,,,266',
',,266,,266,,266,,266,,,,,,,,266,,,,,266,266,266,266,266,266,,,,266,266',
',,,274,274,274,266,274,,266,,274,274,266,266,,274,,274,274,274,274,274',
'274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,',
'274,274,274,274,274,274,274,274,274,,274,274,,274,274,,,,,,,,,,,,,,',
',,,,,,274,,,274,,274,274,,,274,,274,,274,,274,,,,,,,,274,,,,,274,274',
'274,274,274,274,,,,274,274,,,,,,,274,,,274,,,,274,274,818,818,818,818',
'818,,,,818,818,,,,818,,818,818,818,818,818,818,818,,,,,,818,818,818',
'818,818,818,818,,,818,,,,,,818,818,,818,818,818,,818,818,818,818,818',
',818,818,818,,818,818,,818,818,,,,,,,,,,,,,,,,,,,,,818,,,818,,,818,',
',818,,818,,,,818,,,,,,,,818,,,,,818,818,818,818,818,818,,,,818,818,',
',,,,,818,,,818,,,,818,818,817,817,817,817,817,,,,817,817,,,,817,,817',
'817,817,817,817,817,817,,,,,,817,817,817,817,817,817,817,,,817,,,,,',
'817,817,,817,817,817,,817,817,817,817,817,,817,817,817,,817,817,,817',
'817,,,,,,,,,,,,,,,,,,,,,817,,,817,,,817,,,817,,817,,,,817,,,,,,,,817',
',,,,817,817,817,817,817,817,,,,817,817,,,,815,815,815,817,815,,817,',
'815,815,817,817,,815,,815,815,815,815,815,815,815,,,,,,815,815,815,815',
'815,815,815,,,815,,,,,,,815,,,815,815,,815,815,815,815,815,,815,815',
'815,,815,815,,815,815,,,,,,,,,,,,,,,,,,,,,815,,,815,,,815,,,815,,,,',
',815,,,,,,,,815,,,,,815,815,815,815,815,815,,,,815,815,,,,,,,815,,,815',
',,,815,815,278,278,278,278,278,,,,278,278,,,,278,,278,278,278,278,278',
'278,278,,,,,,278,278,278,278,278,278,278,,,278,,,,,,278,278,,278,278',
'278,,278,278,278,278,278,,278,278,278,,278,278,,278,278,,,,,,,,,,,,',
',,,,,,,,278,,,278,,,278,,,278,,278,,,,278,,,,,,,,278,,,,,278,278,278',
'278,278,278,,,,278,278,,,,678,678,678,278,678,,278,,678,678,278,278',
',678,,678,678,678,678,678,678,678,,,,,,678,678,678,678,678,678,678,',
',678,,,,,,,678,,,678,678,,678,678,678,678,678,,678,678,678,,678,678',
'838,,838,838,838,838,838,,,,,,,,,,838,,,,,,,678,,,678,,,678,,,678,,',
',,,838,,,,,,,,838,838,838,838,,678,678,678,678,678,678,,,,678,678,,',
',,,,678,,,678,,,,678,678,796,796,796,796,796,,,838,796,796,,,,796,,796',
'796,796,796,796,796,796,,,,,,796,796,796,796,796,796,796,,,796,,,,,',
'796,796,,796,796,796,,796,796,796,796,796,,796,796,796,,796,796,,796',
'796,,,,,,,,,,,,,,,,,,,,,796,,,796,,,796,,,796,,796,,,,796,,,,,,,,796',
',,,,796,796,796,796,796,796,,,,796,796,,,,366,366,366,796,366,,796,',
'366,366,796,796,,366,,366,366,366,366,366,366,366,,,,,,366,366,366,366',
'366,366,366,,,366,,,,,,,366,,,366,366,,366,366,366,366,366,,366,366',
'366,,366,366,,,,,,,,,,,,,,,,,,,,,,,,366,,,366,,,366,,,366,,,,,,,,,,',
',,,,,,,,366,366,366,366,366,366,,,,366,366,,,,282,282,282,366,282,,366',
',282,282,366,366,,282,,282,282,282,282,282,282,282,,,,,,282,282,282',
'282,282,282,282,,,282,,,,,,,282,,,282,282,,282,282,282,282,282,,282',
'282,282,,282,282,,,,,,,,,,,,,,,,,,,,,,,,282,,,282,,,282,,,282,,,,,,',
',,,,,,,,,,,,282,282,282,282,282,282,,,,282,282,,,,282,,,282,,,282,,',
',282,282,283,283,283,283,283,,,,283,283,,,,283,,283,283,283,283,283',
'283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,283,283,,283,283',
'283,,283,283,283,283,283,,283,283,283,,283,283,,283,283,,,,,,,,,,,,',
',,,,,,,,283,,,283,,,283,,,283,,283,,,,283,,,,,,,,283,,,,,283,283,283',
'283,283,283,,,,283,283,,,,684,684,684,283,684,,283,,684,684,283,283',
',684,,684,684,684,684,684,684,684,,,,,,684,684,684,684,684,684,684,',
',684,,,,,,,684,,,684,684,,684,684,684,684,684,,684,684,684,,684,684',
',684,684,,,,,,,,,,,,,,,,,,,,,684,,,684,,,684,,,684,,684,,,,684,,,,,',
',,684,,,,,684,684,684,684,684,684,,,,684,684,,,,759,759,759,684,759',
',684,,759,759,684,684,,759,,759,759,759,759,759,759,759,,,,,,759,759',
'759,759,759,759,759,,,759,,,,,,,759,,,759,759,,759,759,759,759,759,',
'759,759,759,,759,759,,759,759,,,,,,,,,,,,,,,,,,,,,759,,,759,,,759,,',
'759,,,,,,759,,,,,,,,759,,,,,759,759,759,759,759,759,,,,759,759,,,,786',
'786,786,759,786,,759,,786,786,759,759,,786,,786,786,786,786,786,786',
'786,,,,,,786,786,786,786,786,786,786,,,786,,,,,,,786,,,786,786,,786',
'786,786,786,786,,786,786,786,,786,786,,786,786,,,,,,,,,,,,,,,,,,,,,786',
',,786,,,786,,,786,,786,,,,786,,,,,,,,786,,,,,786,786,786,786,786,786',
',,,786,786,,,,347,347,347,786,347,,786,,347,347,786,786,,347,,347,347',
'347,347,347,347,347,,,,,,347,347,347,347,347,347,347,,,347,,,,,,,347',
',,347,347,,347,347,347,347,347,,347,347,347,,347,347,,347,347,,,,,,',
',,,,,,,,,,,,,,347,,,347,,,347,,,347,,,,,,347,,,,,,,,347,,,,,347,347',
'347,347,347,347,,,,347,347,,,,346,346,346,347,346,,347,,346,346,347',
'347,,346,,346,346,346,346,346,346,346,,,,,,346,346,346,346,346,346,346',
',,346,,,,,,,346,,,346,346,,346,346,346,346,346,,346,346,346,,346,346',
',346,346,,,,,,,,,,,,,,,,,,,,,346,,,346,,,346,,,346,,,,,,346,,,,,,,,346',
',,,,346,346,346,346,346,346,,,,346,346,,,,771,771,771,346,771,,346,',
'771,771,346,346,,771,,771,771,771,771,771,771,771,,,,,,771,771,771,771',
'771,771,771,,,771,,,,,,,771,,,771,771,,771,771,771,771,771,,771,771',
'771,,771,771,,771,771,,,,,,,,,,,,,,,,,,,,,771,,,771,,,771,,,771,,,,',
',771,,,,,,,,771,,,,,771,771,771,771,771,771,,,,771,771,,,,721,721,721',
'771,721,,771,,721,721,771,771,,721,,721,721,721,721,721,721,721,,,,',
',721,721,721,721,721,721,721,,,721,,,,,,,721,,,721,721,,721,721,721',
'721,721,,721,721,721,,721,721,,721,721,,,,,,,,,,,,,,,,,,,,,721,,,721',
',,721,,,721,,,,,,721,,,,,,,,721,,,,,721,721,721,721,721,721,,,,721,721',
',,,770,770,770,721,770,,721,,770,770,721,721,,770,,770,770,770,770,770',
'770,770,,,,,,770,770,770,770,770,770,770,,,770,,,,,,,770,,,770,770,',
'770,770,770,770,770,,770,770,770,,770,770,,770,770,,,,,,,,,,,,,,,,,',
',,,770,,,770,,,770,,,770,,,,,,770,,,,,,,,770,,,,,770,770,770,770,770',
'770,,,,770,770,,,,769,769,769,770,769,,770,,769,769,770,770,,769,,769',
'769,769,769,769,769,769,,,,,,769,769,769,769,769,769,769,,,769,,,,,',
',769,,,769,769,,769,769,769,769,769,,769,769,769,,769,769,,769,769,',
',,,,,,,,,,,,,,,,,,,769,,,769,,,769,,,769,,,,,,769,,,,,,,,769,,,,,769',
'769,769,769,769,769,,,,769,769,,,,295,295,295,769,295,,769,,295,295',
'769,769,,295,,295,295,295,295,295,295,295,,,,,,295,295,295,295,295,295',
'295,,,295,,,,,,,295,,,295,295,,295,295,295,295,295,,295,295,295,,295',
'295,,,,,,,,,,,,,,,,,,,,,,,,295,,,295,,,295,,,295,,,,,,,,,,,,,,,,,,,295',
'295,295,295,295,295,,,,295,295,,,,,,,295,,,295,,,,295,295,726,726,726',
'726,726,,,,726,726,,,,726,,726,726,726,726,726,726,726,,,,,,726,726',
'726,726,726,726,726,,,726,,,,,,726,726,,726,726,726,,726,726,726,726',
'726,,726,726,726,,726,726,,726,726,,,,,,,,,,,,,,,,,,,,,726,,,726,,,726',
',,726,,726,,,,726,,,,,,,,726,,,,,726,726,726,726,726,726,,,,726,726',
',,,,,,726,,,726,,,,726,726,730,730,730,730,730,,,,730,730,,,,730,,730',
'730,730,730,730,730,730,,,,,,730,730,730,730,730,730,730,,,730,,,,,',
'730,730,,730,730,730,,730,730,730,730,730,,730,730,730,,730,730,,730',
'730,,,,,,,,,,,,,,,,,,,,,730,,,730,,,730,,,730,,730,,,,730,,,,,,,,730',
',,,,730,730,730,730,730,730,,,,730,730,,,,,,,730,,,730,,,,730,730,731',
'731,731,731,731,,,,731,731,,,,731,,731,731,731,731,731,731,731,,,,,',
'731,731,731,731,731,731,731,,,731,,,,,,731,731,,731,731,731,,731,731',
'731,731,731,,731,731,731,,731,731,,731,731,,,,,,,,,,,,,,,,,,,,,731,',
',731,,,731,,,731,,731,,,,731,,,,,,,,731,,,,,731,731,731,731,731,731',
',,,731,731,,,,738,738,738,731,738,,731,,738,738,731,731,,738,,738,738',
'738,738,738,738,738,,,,,,738,738,738,738,738,738,738,,,738,,,,,,,738',
',,738,738,,738,738,738,738,738,,738,738,738,,738,738,,738,738,,,,,,',
',,,,,,,,,,,,,,738,,,738,,,738,,,738,,,,,,738,,,,,,,,738,,,,,738,738',
'738,738,738,738,,,,738,738,,,,,,,738,,,738,,,,738,738,752,752,752,752',
'752,,,,752,752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752,752',
'752,752,752,752,,,752,,,,,,752,752,,752,752,752,,752,752,752,752,752',
',752,752,752,,752,752,,752,752,,,,,,,,,,,,,,,,,,,,,752,,,752,,,752,',
',752,,752,,,,752,,,,,,,,752,,,,,752,752,752,752,752,752,,,,752,752,',
',,304,304,304,752,304,,752,,304,304,752,752,,304,,304,304,304,304,304',
'304,304,,,,,,304,304,304,304,304,304,304,,,304,,,,,,,304,,,304,304,',
'304,304,304,304,304,,304,304,304,,304,304,,304,304,,,,,,,,,,,,,,,,,',
',,,304,,,304,304,,304,,,304,,,,,,304,,,,,,,,304,,,,,304,304,304,304',
'304,304,,,,304,304,,,,,,,304,,,304,,,,304,304,306,306,306,306,306,,',
',306,306,,,,306,,306,306,306,306,306,306,306,,,,,,306,306,306,306,306',
'306,306,,,306,,,,,,306,306,,306,306,306,,306,306,306,306,306,,306,306',
'306,,306,306,,306,306,,,,,,,,,,,,,,,,,,,,,306,,,306,,,306,,,306,,306',
',,,306,,,,,,,,306,,,,,306,306,306,306,306,306,,,,306,306,,,,758,758',
'758,306,758,,306,,758,758,306,306,,758,,758,758,758,758,758,758,758',
',,,,,758,758,758,758,758,758,758,,,758,,,,,,,758,,,758,758,,758,758',
'758,758,758,,758,758,758,,758,758,,758,758,,,,,,,,,,,,,,,,,,,,,758,',
',758,,,758,,,758,,,,,,758,,,,,,,,758,,,,,758,758,758,758,758,758,,,',
'758,758,,,,715,715,715,758,715,,758,,715,715,758,758,,715,,715,715,715',
'715,715,715,715,,,,,,715,715,715,715,715,715,715,,,715,,,,,,,715,,,715',
'715,,715,715,715,715,715,,715,715,715,,715,715,,715,715,,,,,,,,,,,,',
',,,,,,,,715,,,715,,,715,,,715,,715,,,,715,,,,,,,,715,,,,,715,715,715',
'715,715,715,,,,715,715,,,,87,,,715,,,715,87,87,87,715,715,87,87,87,',
'87,,,,,,,,87,,87,87,87,,,,,,,,87,87,,87,87,87,87,87,,,,,,,,,,,,,,,,',
',,,,,,,87,87,87,87,87,87,87,87,87,87,87,87,87,87,,,87,87,87,,87,87,',
',87,,,87,,87,,87,,87,,87,87,87,87,87,87,87,,87,,87,,,,,,,,,,,,,87,87',
'87,87,,87,84,87,87,,,87,,84,84,84,,,84,84,84,,84,,,,,,,,84,,84,84,84',
',,,,,,,84,84,,84,84,84,84,84,,,,,,,,,,,,,,,,,,,,,,,,84,84,84,84,84,84',
'84,84,84,84,84,84,84,84,,,84,84,84,,84,84,,,84,,,84,,84,,84,,84,,84',
'84,84,84,84,84,84,,84,,84,,,,,,,,,,,,,84,84,84,84,,84,631,84,84,,,84',
',631,631,631,,,631,631,631,,631,,,,,,,,,631,631,631,,,,,,,,,631,631',
',631,631,631,631,631,,,,,,,,,,,,,,,,,,,,,,,,631,631,631,631,631,631',
'631,631,631,631,631,631,631,631,,,631,631,631,,631,631,,,631,,,631,',
'631,,631,,631,,631,631,631,631,631,631,631,,631,631,631,,,,,,,,,,,,',
'631,631,631,631,,631,432,,631,,,631,,432,432,432,,,,432,432,,432,,,',
',,,,,432,,,,,,,,,,,432,432,,432,432,432,432,432,,,,,,,,,,,,,,,,,,,,',
',,,432,432,432,432,432,432,432,432,432,432,432,432,432,432,,,432,432',
'432,,432,,,,432,,,,,,,432,,432,,432,432,432,432,432,432,432,,432,432',
'432,,,,,,,,,,,,,432,432,,432,,432,632,,432,,,432,,632,632,632,,,632',
'632,632,,632,,,,,,,,,,632,632,,,,,,,,,632,632,,632,632,632,632,632,',
',,,,,,,,,,,,,,,,,,,,,,632,632,632,632,632,632,632,632,632,632,632,632',
'632,632,,,632,632,632,,632,632,,,632,,,632,,632,,632,,632,,632,632,632',
'632,632,632,632,,632,,632,,,,,,,,,,,,,632,632,632,632,,632,434,,632',
',,632,,434,434,434,,,,434,434,,434,,,,,,,,,,,,,,,,,,,,434,434,,434,434',
'434,434,434,,,,,,,,,,,,,,,,,,,,,,,,434,434,434,434,434,434,434,434,434',
'434,434,434,434,434,,,434,434,434,,434,,,,434,,,,,,,434,,434,,434,434',
'434,434,434,434,434,,434,,434,,,,,,,,,,,,,434,434,,434,,434,50,,434',
',,434,,50,50,50,,,50,50,50,,50,,,,,,,,,,50,50,50,,,,,,,,50,50,,50,50',
'50,50,50,,,,,,,,,,,,,,,,,,,,,,,,50,50,50,50,50,50,50,50,50,50,50,50',
'50,50,,,50,50,50,,,50,,,50,,,50,,50,,50,,50,,50,50,50,50,50,50,50,,50',
',50,,,,,,,,,,,,,50,50,50,50,428,50,,50,50,,,428,428,428,,,428,428,428',
',428,,,,,,,,,428,428,428,,,,,,,,,428,428,,428,428,428,428,428,,,,,,',
',,,,,,,,,,,,,,,,,428,428,428,428,428,428,428,428,428,428,428,428,428',
'428,,,428,428,428,,,428,,428,428,,,428,,428,,428,,428,,428,428,428,428',
'428,428,428,,428,428,428,,,,,,,,,,,,,428,428,428,428,437,428,,,428,',
',437,437,437,,,437,437,437,,437,,,,,,,,,437,437,437,437,,,,,,,,437,437',
',437,437,437,437,437,,,,,,,,,,,,,,,,,,,,,,,,437,437,437,437,437,437',
'437,437,437,437,437,437,437,437,,,437,437,437,,,437,,,437,,,437,,437',
',437,,437,,437,437,437,437,437,437,437,,437,437,437,,,,,,,,,,,,,437',
'437,437,437,27,437,,437,437,,,27,27,27,,,27,27,27,,27,,,,,,,,,27,27',
'27,,,,,,,,,27,27,,27,27,27,27,27,,,,,,,,,,,,,,,,,,,,,,,,27,27,27,27',
'27,27,27,27,27,27,27,27,27,27,,,27,27,27,,,27,,27,27,,,27,,27,,27,,27',
',27,27,27,27,27,27,27,,27,27,27,,,,,,,,,,,,,27,27,27,27,28,27,,,27,',
',28,28,28,,,28,28,28,,28,,,,,,,,,,28,28,,,,,,,,,28,28,,28,28,28,28,28',
',,,,,,,,,,,,,,,,,,,,,,,28,28,28,28,28,28,28,28,28,28,28,28,28,28,,,28',
'28,28,,,28,,28,28,,,28,,28,,28,,28,,28,28,28,28,28,28,28,,28,,28,,,',
',,,,,,,,,28,28,28,28,436,28,,,28,,,436,436,436,,,436,436,436,,436,,',
',,,,,,436,436,436,436,,,,,,,,436,436,,436,436,436,436,436,,,,,,,,,,',
',,,,,,,,,,,,,436,436,436,436,436,436,436,436,436,436,436,436,436,436',
',,436,436,436,,,436,,,436,,,436,,436,,436,,436,,436,436,436,436,436',
'436,436,,436,436,436,,,,,,,,,,,,,436,436,436,436,486,436,,436,436,,',
'486,486,486,,,486,486,486,,486,,,,,,,,,,486,,,,,,,,,,486,486,,486,486',
'486,486,486,,,,,,,,,,,,,489,,,,,,,489,489,489,,,489,489,489,,489,,,',
',,486,,,,489,,,486,,,,,486,486,489,489,,489,489,489,489,489,,,,,,,,',
',,,,486,,,,,,,,,,,,,486,,486,,,486,,,,489,,,,,,,489,,,,,489,489,,,,',
',,,,,,,,,,,,,,,,489,,,,,,,,,,,,,489,,489,,,489,8,8,8,8,8,8,8,8,8,8,8',
'8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
'8,,8,8,,,8,,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,8',
'8,,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,8,412,412,412,412,412,412,412',
'412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412',
',,,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412',
'412,412,412,412,,412,412,,,412,,,,,,,,,412,412,,412,412,412,412,412',
'412,412,,,412,412,,,,412,412,412,412,,,,,,,,,,,,,412,412,,412,412,412',
'412,412,412,412,412,412,412,412,,,412,412,,,,,,,,,,412,7,7,7,7,7,7,7',
'7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,,,,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7',
'7,7,7,7,7,,7,7,7,,7,,,,,,,,,7,7,,7,7,7,7,7,7,7,,,7,7,,,,7,7,7,7,,,,',
',,,,,,,,7,7,,7,7,7,7,7,7,7,7,7,7,7,,,7,7,,,,,,,,,,7,408,408,408,408',
'408,408,408,408,408,408,408,408,408,408,408,408,408,408,408,408,408',
'408,408,408,,,,408,408,408,408,408,408,408,408,408,408,408,408,408,408',
'408,408,408,408,408,408,408,,408,408,,,408,,,,,,,,,408,408,,408,408',
'408,408,408,408,408,,,408,408,,,,408,408,408,408,,,,,,,,,,,,,408,408',
',408,408,408,408,408,408,408,408,408,408,408,,,408,408,,,,,,,,,,408',
'65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65',
'65,,,,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65',
',65,65,65,65,65,,65,,,,,,,65,65,,65,65,65,65,65,65,65,,,65,65,,,,65',
'65,65,65,,,,,,65,,,,,,,65,65,,65,65,65,65,65,65,65,65,65,65,65,,,65',
'79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79',
'79,,,,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79',
',79,79,79,79,79,,79,,,,,,,79,79,,79,79,79,79,79,79,79,,,79,79,,,,79',
'79,79,79,,,,,,,,,,,,,79,79,,79,79,79,79,79,79,79,79,79,79,79,,,79,749',
'749,749,749,749,749,749,749,749,749,749,749,749,749,749,749,749,749',
'749,749,749,749,749,749,,,,749,749,749,749,749,749,749,749,749,749,749',
'749,749,749,749,749,749,749,749,749,749,,749,749,,,749,,,,,,,,,749,749',
',749,749,749,749,749,749,749,,,749,749,,,,749,749,749,749,,,,,,,,,,',
',,749,749,,749,749,749,749,749,749,749,749,749,749,749,,,749,192,192',
'192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,192,,,,192,192,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,192,192,192,192,192,,192,192,192,192,192,,192,,,,,,',
'192,192,,192,192,192,192,192,192,192,,,192,192,,,,192,192,192,192,,',
',,,,,,,,,,192,192,,192,192,192,192,192,192,192,192,192,192,192,200,200',
'192,,200,,,,,,,,,200,200,,200,200,200,200,200,200,200,,,200,200,,,,200',
'200,200,200,,,,,,200,,,,,,,200,200,,200,200,200,200,200,200,200,200',
'200,200,200,262,262,200,,262,,,,,,,,,262,262,,262,262,262,262,262,262',
'262,,,262,262,,,,262,262,262,262,,,,,,,,,,,,,262,262,,262,262,262,262',
'262,262,262,262,262,262,262,263,263,262,,263,,,,,,,,,263,263,,263,263',
'263,263,263,263,263,,,263,263,,,,263,263,263,263,,,,,,,,,,,,,263,263',
',263,263,263,263,263,263,263,263,263,263,263,514,514,263,,514,,,,,,',
',,514,514,,514,514,514,514,514,514,514,,,514,514,,,,514,514,514,514',
',,,,,514,,,,,,,514,514,,514,514,514,514,514,514,514,514,514,514,514',
'442,442,514,,442,,,,,,,,,442,442,,442,442,442,442,442,442,442,,,442',
'442,,,,442,442,442,442,,,,,,442,,,,,,,442,442,,442,442,442,442,442,442',
'442,442,442,442,442,443,443,442,,443,,,,,,,,,443,443,,443,443,443,443',
'443,443,443,,,443,443,,,,443,443,443,443,,,,,,,,,,,,,443,443,,443,443',
'443,443,443,443,443,443,443,443,443,575,575,443,,575,,,,,,,,,575,575',
',575,575,575,575,575,575,575,,,575,575,,,,575,575,575,575,,,,,,575,',
',,,,,575,575,,575,575,575,575,575,575,575,575,575,575,575,805,805,575',
',805,,,,,,,,,805,805,,805,805,805,805,805,805,805,,,805,805,,,,805,805',
'805,805,,,,,,,,,,,,,805,805,,805,805,805,805,805,805,805,805,805,805',
'805,576,576,805,,576,,,,,,,,,576,576,,576,576,576,576,576,576,576,,',
'576,576,,,,576,576,576,576,,,,,,,,,,,,,576,576,,576,576,576,576,576',
'576,576,576,576,576,576,201,201,576,,201,,,,,,,,,201,201,,201,201,201',
'201,201,201,201,,,201,201,,,,201,201,201,201,,,,,,,,,,,,,201,201,,201',
'201,201,201,201,201,201,201,201,201,201,655,655,201,,655,,,,,,,,,655',
'655,,655,655,655,655,655,655,655,,,655,655,,,,655,655,655,655,,,,,,',
',,,,,,655,655,,655,655,655,655,655,655,655,655,655,655,655,656,656,655',
',656,,,,,,,,,656,656,,656,656,656,656,656,656,656,,,656,656,,,,656,656',
'656,656,,,,,,,,,,,,,656,656,,656,656,656,656,656,656,656,656,656,656',
'656,525,525,656,,525,,,,,,,,,525,525,,525,525,525,525,525,525,525,,',
'525,525,,,,525,525,525,525,,,,,,525,,,,,,,525,525,,525,525,525,525,525',
'525,525,525,525,525,525,926,926,525,,926,,,,,,,,,926,926,,926,926,926',
'926,926,926,926,,,926,926,,,,926,926,926,926,,,,,,926,,,,,,,926,926',
',926,926,926,926,926,926,926,926,926,926,926,526,526,926,,526,,,,,,',
',,526,526,,526,526,526,526,526,526,526,,,526,526,,,,526,526,526,526',
',,,,,,,,,,,,526,526,,526,526,526,526,526,526,526,526,526,526,526,581',
'581,526,,581,,,,,,,,,581,581,,581,581,581,581,581,581,581,,,581,581',
',,,581,581,581,581,,,,,,,,,,,,,581,581,,581,581,581,581,581,581,581',
'581,581,581,581,927,927,581,,927,,,,,,,,,927,927,,927,927,927,927,927',
'927,927,,,927,927,,,,927,927,927,927,,,,,,,,,,,,,927,927,,927,927,927',
'927,927,927,927,927,927,927,927,583,583,927,,583,,,,,,,,,583,583,,583',
'583,583,583,583,583,583,,,583,583,,,,583,583,583,583,,,,,,583,,,,,,',
'583,583,,583,583,583,583,583,583,583,583,583,583,583,515,515,583,,515',
',,,,,,,,515,515,,515,515,515,515,515,515,515,,,515,515,,,,515,515,515',
'515,,,,,,,,,,,,,515,515,,515,515,515,515,515,515,515,515,515,515,515',
',,515' ]
        racc_action_check = arr = ::Array.new(23675, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,  1244,   nil,   459,   nil,   763,  1127, 21839, 21593,  1095,
  1067,  1066,  1113,   370,   465,   630,   nil,  1810,  1936,  2578,
  1155,   nil,  2326,  2452,  2578,   372,   232, 21021, 21150,   nil,
  3244,  3370,  3496,   nil,  1044,   603,  1108,    20,  4174,  4300,
  4426,  1030,   337,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 20634,   nil,  4942,  5068,  5194,    29,  6100,  5572,  5698,   nil,
   nil,  5824,  5962,  6088,   nil, 22085,   nil,   nil,   nil,   nil,
   nil,   225,   nil,   nil,   nil,   nil,   nil,   997,   995, 22197,
   nil,   nil,   nil,   -23, 19979,   nil,   nil, 19848,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1115,   nil,  7384,
   nil,   nil,   nil,  7522,  7648,  7774,  7900,  8038,  8176,   nil,
   191,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 22421,   983,   nil,  8704,  8830,  8956,  9082,  9208,
 22481, 23021,  9586,  9712,  9838,   nil,   549,   254,  1035,   223,
   940,   987, 10744, 10870,   nil,   nil, 10996,   982, 11248, 11374,
 11500, 11626, 11752, 11878, 12004, 12130, 12256, 12382, 12508, 12634,
 12760, 12886, 13012, 13138, 13264, 13390, 13516, 13642, 13768, 13894,
 14020, 14146, 14272, 14398,   nil,   nil,   nil,  1546,   nil,   918,
   901,   nil, 14914,   938, 15166,   nil,   nil,   nil,   nil, 15292,
   nil,   nil, 22541, 22601,   929, 15820, 15946,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 16072,   195,   889,   924, 16612,   906,
   900,   858, 17128, 17266,   181,   368,   912,   334,   851,   795,
   226,   nil,   828,   691,   nil, 18526,   nil,   333,   836,   833,
   546,   nil,   832,   nil, 19330,   nil, 19468,    39,   nil,   766,
   608,   540,   781,   759,    42,   737,   nil,   nil,    42,  5974,
   nil,   nil,   nil,   662,   651,   nil,   594,   558,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  2702,   nil,   nil,   nil,   572,
   nil,   nil,   548,   823,    77,   107, 17896, 17770,   551,   761,
   321,    56,   411,   345,    24,   323,   nil,   nil,   239,   223,
   nil,   505,   nil,    65,   nil,   nil, 17002,   374,   464,   707,
   431,   649,   461,   307,   402,   nil,   683,   nil, 15040,   nil,
   236,   nil,   255,   nil,   -23,   -30,   323,   nil,    65,   -34,
   nil,   231,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   301, 21962,   nil,
   nil,   nil, 21716,   446,   nil,   nil,   502,   nil, 14524,   440,
   nil,   637,   nil,   nil,  2200,   700,   511,   528, 20763,   nil,
   nil,   nil, 20241,   748, 20503,   nil, 21279, 20892,   nil,   904,
   nil,   nil, 22721, 22781, 10216,    14,  9964,  9460,  9334,   447,
   nil,  2968,  3244,   230,  1435,   823,   846,   893,   931,  5068,
  5194,  3371,  4552,  4048,  2842,  3772,  4174,  4300,  4690,  4942,
  4816,  4426,   716,  2812,  3910,  3106,   778,   341,   nil,  2968,
   nil,  2842,   nil,  2062,   nil,   nil, 21408,   nil,   nil, 21464,
   -34,   nil,  1021,   995,   121,  1037,  1153,   nil,   nil,   904,
    85,   -17,  1090,   nil,   nil,   640,  1093,  1064,   nil,   nil,
  1115,   250,  1155,   124, 22661, 23561,   618,  1151,   nil,   nil,
  1088,   nil,   376,   502,   778, 23201, 23321,  1684,  1030,  1150,
  1143,  1036,   nil,   nil,  1156,   nil,   nil,  1408,   nil,   nil,
   nil,   nil,  1684,  3106,  1002,   nil,   847,   nil,   nil,  3634,
  2769,   nil,    49,   nil,   nil,   986,   nil,  2732,   nil,   938,
  1142,   nil,   nil,  3772,  1012,   nil,   nil,  3910,   219,    38,
  1001,   991,  4690,   nil,  4816, 22841, 22961,    84,   nil,   378,
   nil, 23381,  5320, 23501,   nil,   nil,  5446,   661,  6214,   nil,
  3508,   nil,   nil,   nil,    41,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -35,   nil,   nil,   nil,   811,
   nil,   nil,   nil,   nil,   nil,  6742,   783,  6868,   330,  6994,
  7120,   781,   nil,   nil,   nil,  8302,   778,   nil,  8428,   187,
    64, 20110, 20372,   734,   640,   nil, 10468,   nil,  3382,   nil,
 10606,   552,   nil,   507, 11122,   nil,   nil,   nil,   nil,   nil,
   nil, 14662,   nil,   407,   397, 23081, 23141, 14788,  1408,   -63,
   nil,   nil,   -68, 15430, 15568,   nil,  1015,   -22, 15694,  -114,
   nil,  1047,   199,   100,   -29,   202,   640,    43, 16738,  1030,
   222,   233,   240,   348, 17392,   nil,   nil,   351,   311,   423,
   nil,   nil,   300,   nil,   314,   369,   405,   336,   350,   nil,
   nil,   391,  2739,   nil,   217,   nil,   504,   nil,   nil,   nil,
   nil,   nil,   517,   nil,   534, 19720,   468,   101,    10,   -18,
   -17, 18148,   502,   nil,   610,   612, 18664,   507,   nil,   -25,
 18802, 18940,  7258,   196,   nil,   nil,   783,   nil, 19066,   nil,
   713,   716,   nil,   728,   735,   740,   nil,   733,   nil, 22309,
   781,   595, 19204,   nil,   nil,   nil,  2326,   761, 19594, 17518,
   nil,  1282,   nil,  1156,   nil,   nil,  1810,   nil,  1936, 18400,
 18274, 18022,   -65,  2062,   nil,   835,   939,   nil,   nil,   838,
   nil,   nil,   861,   864,   209,   937, 17644,   nil,   858,   973,
   857,   544,   nil,   nil,   981,   nil, 16876,   864,   906,   nil,
   nil,   nil,   nil,   nil,   nil, 22901,   nil,   375,   nil,   nil,
   nil,   nil,  1016,   992,   nil, 16474,  1007, 16348, 16210,   nil,
   nil,    90,   107,    78,   nil,  1022,   nil,   nil,  1028,  1030,
   919,   nil,   nil,   nil,   219,   nil,   nil,   514, 16750,   nil,
   304,   nil,   -32,   nil, 10342,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   968,   958,   nil,  2452, 10090,   nil,   nil,   nil,
  1005,   980,   nil,   nil,   nil,  8566,   nil,   nil,    97,  7246,
   nil,  1027,   990,   nil,   nil,    -7,   nil,  1112,  1114,  6616,
  6490,   nil,   nil,  6352,   nil,   nil,  1038,   nil,  -118,   nil,
   nil,  1014,  1015,  1022,  1015,   nil,   nil,  3646,   nil,   nil,
   nil,  4552,   nil,  4048,   285,   228,  1115,   643,   nil,   nil,
  2716,   nil,   nil,   nil,   808,  2200,  1174,   nil,   nil,   430,
   nil,   nil,   nil,  1546,  1191,  1282, 23261, 23441,   463,   852,
   nil,   nil,   nil,  1210,   nil,  1094,  1225,   nil,  1143,    84,
    67,    71,   682,   nil,   nil,   nil,   nil,   684 ]

racc_action_default = [
    -3,  -543,    -1,  -531,    -4,    -6,  -543,  -543,  -543,  -543,
  -543,  -543,  -543,  -543,  -268,   -36,   -37,  -543,  -543,   -42,
   -44,   -45,  -279,  -317,  -318,   -49,  -246,  -246,  -246,   -61,
   -10,   -65,   -72,   -74,  -543,  -445,  -543,  -543,  -543,  -543,
  -543,  -533,  -226,  -261,  -262,  -263,  -264,  -265,  -266,  -267,
  -521,  -270,  -543,  -542,  -513,  -287,  -542,  -543,  -543,  -292,
  -295,  -531,  -543,  -543,  -309,  -543,  -319,  -320,  -388,  -389,
  -390,  -391,  -392,  -542,  -395,  -542,  -542,  -542,  -542,  -542,
  -422,  -428,  -429,  -543,  -519,  -435,  -436,  -520,  -438,  -439,
  -440,  -441,  -442,  -443,  -444,  -447,  -448,  -543,    -2,  -532,
  -538,  -539,  -540,  -543,  -543,  -543,  -543,  -543,    -3,   -13,
  -543,  -100,  -101,  -102,  -103,  -104,  -105,  -106,  -109,  -110,
  -111,  -112,  -113,  -114,  -115,  -116,  -117,  -118,  -119,  -120,
  -121,  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -130,
  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,
  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,
  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,
  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,
  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,
  -181,  -182,  -543,   -18,  -107,   -10,  -543,  -543,  -543,  -542,
  -543,  -543,  -543,  -543,  -543,   -40,  -543,  -445,  -543,  -268,
  -543,  -543,   -10,  -543,   -41,  -218,  -543,  -543,  -543,  -543,
  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
  -543,  -543,  -543,  -543,  -359,  -361,   -46,  -227,  -239,  -253,
  -253,  -243,  -543,  -254,  -543,  -279,  -317,  -318,  -515,  -543,
   -47,   -48,  -543,  -543,   -53,  -542,  -543,  -286,  -364,  -371,
  -373,   -59,  -369,   -60,  -543,  -531,   -11,   -61,   -10,  -543,
  -543,   -66,   -69,   -10,   -80,  -543,  -543,   -87,  -282,  -533,
  -543,  -321,  -370,  -543,   -71,  -543,   -76,  -275,  -430,  -431,
  -543,  -203,  -204,  -219,  -543,  -534,   -10,  -533,  -228,  -533,
  -535,  -535,  -543,  -543,  -535,  -543,  -288,  -289,  -543,  -543,
  -332,  -333,  -340,  -542,  -479,  -347,  -542,  -542,  -358,  -478,
  -480,  -481,  -482,  -483,  -484,  -543,  -497,  -502,  -503,  -505,
  -506,  -507,  -543,   -43,  -543,  -543,  -543,  -543,  -531,  -543,
  -532,  -445,  -543,  -543,  -268,  -543,  -486,  -487,   -96,  -543,
   -98,  -543,  -268,  -543,  -306,  -445,  -543,  -100,  -101,  -138,
  -139,  -155,  -160,  -167,  -170,  -312,  -543,  -511,  -543,  -393,
  -543,  -408,  -543,  -410,  -543,  -543,  -543,  -400,  -543,  -543,
  -406,  -543,  -421,  -423,  -424,  -425,  -426,  -432,  -433,   948,
    -5,  -541,   -19,   -20,   -21,   -22,   -23,  -543,  -543,   -15,
   -16,   -17,  -543,  -543,   -25,   -33,  -183,  -254,  -543,  -543,
   -26,   -34,   -35,   -27,  -185,  -543,  -522,  -523,  -246,  -366,
  -524,  -525,  -522,  -246,  -523,  -368,  -524,  -525,   -32,  -192,
   -38,   -39,  -543,  -543,  -542,  -275,  -543,  -543,  -543,  -543,
  -285,  -193,  -194,  -195,  -196,  -197,  -198,  -199,  -200,  -205,
  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -214,  -215,
  -216,  -217,  -220,  -221,  -222,  -223,  -543,  -542,  -240,  -543,
  -241,  -543,  -251,  -543,  -255,  -518,  -246,  -522,  -523,  -246,
  -542,   -54,  -543,  -533,  -533,  -253,  -239,  -247,  -248,  -543,
  -542,  -542,  -543,  -281,    -9,  -532,  -543,   -62,  -273,   -77,
   -67,  -543,  -543,  -542,  -543,  -543,   -86,  -543,  -430,  -431,
   -73,   -78,  -543,  -543,  -543,  -543,  -543,  -224,  -543,  -380,
  -543,  -543,  -229,  -230,  -537,  -536,  -232,  -537,  -277,  -278,
  -514,  -329,   -10,   -10,  -543,  -331,  -543,  -349,  -356,  -543,
  -353,  -354,  -543,  -357,  -479,  -543,  -488,  -543,  -490,  -492,
  -496,  -504,  -508,   -10,  -322,  -323,  -324,   -10,  -543,  -543,
  -543,  -543,   -10,  -375,  -542,  -543,  -543,  -275,  -301,   -96,
   -97,  -543,  -542,  -543,  -304,  -449,  -543,  -543,  -543,  -310,
  -477,  -314,  -529,  -530,  -533,  -394,  -409,  -412,  -413,  -415,
  -396,  -411,  -397,  -398,  -399,  -543,  -402,  -404,  -405,  -543,
  -427,    -7,   -14,  -108,   -24,  -543,  -260,  -543,  -276,  -543,
  -543,   -55,  -237,  -238,  -365,  -543,   -57,  -367,  -543,  -522,
  -523,  -522,  -523,  -543,  -183,  -284,  -543,  -343,  -543,  -345,
   -10,  -253,  -252,  -256,  -543,  -516,  -517,   -50,  -362,   -51,
  -363,   -10,  -233,  -543,  -543,  -543,  -543,  -543,   -42,  -543,
  -245,  -249,  -543,   -10,   -10,  -280,   -12,   -62,  -543,   -70,
   -75,  -543,  -522,  -523,  -542,  -526,   -85,  -543,  -543,  -191,
  -201,  -202,  -543,  -542,  -542,  -271,  -272,  -535,  -543,  -543,
  -330,  -341,  -543,  -348,  -542,  -342,  -543,  -542,  -542,  -498,
  -485,  -543,  -543,  -495,  -542,  -325,  -542,  -293,  -326,  -327,
  -328,  -296,  -543,  -299,  -543,  -543,  -543,  -522,  -523,  -526,
  -274,  -543,   -96,   -99,  -526,  -543,   -10,  -543,  -451,  -543,
   -10,   -10,  -477,  -543,  -454,  -455,  -457,  -458,  -460,  -461,
  -510,  -510,  -466,  -468,  -468,  -468,  -476,  -479,  -500,  -543,
  -543,  -543,   -10,  -401,  -403,  -407,  -184,  -258,  -543,  -543,
   -29,  -187,   -30,  -188,   -56,   -31,  -189,   -58,  -190,  -543,
  -543,  -543,  -276,  -225,  -344,  -543,  -543,  -242,  -257,  -543,
  -234,  -235,  -542,  -542,  -533,  -543,  -543,  -250,  -543,  -543,
   -68,   -81,   -79,  -283,  -542,  -338,   -10,  -381,  -542,  -382,
  -383,  -231,  -334,  -335,  -355,  -543,  -275,  -543,  -351,  -352,
  -489,  -491,  -494,  -543,  -336,  -543,  -543,   -10,   -10,  -298,
  -300,  -543,  -276,  -543,  -276,  -543,  -450,  -307,  -543,  -543,
  -533,  -453,  -456,  -459,  -543,  -464,  -465,  -543,  -543,  -472,
  -543,  -474,  -543,  -475,  -543,  -315,  -512,  -414,  -417,  -418,
  -419,  -420,  -543,  -259,   -28,  -186,  -543,  -346,  -360,   -52,
  -543,  -253,  -372,  -374,    -8,   -10,  -387,  -339,  -543,  -543,
  -385,  -274,  -542,  -493,  -290,  -543,  -291,  -543,  -543,  -543,
   -10,  -302,  -305,   -10,  -311,  -313,  -543,  -462,  -510,  -509,
  -467,  -468,  -468,  -468,  -543,  -501,  -499,  -477,  -416,  -236,
  -244,  -543,  -386,   -10,   -88,  -543,  -543,   -95,  -384,  -350,
   -10,  -294,  -297,  -256,  -542,   -10,  -543,  -452,  -463,  -543,
  -470,  -471,  -473,   -10,  -380,  -542,  -543,  -543,   -94,  -542,
  -376,  -377,  -378,  -543,  -308,  -468,  -543,  -379,  -543,  -522,
  -523,  -526,   -93,  -337,  -303,  -469,  -316,   -89 ]

clist = [
'13,480,312,571,683,494,248,248,248,320,363,375,428,433,328,281,743,206',
'206,249,249,249,206,206,206,393,415,422,109,194,13,285,285,699,12,520',
'10,309,268,272,563,567,731,746,102,813,344,345,214,691,348,548,206,206',
'551,553,491,206,206,294,5,206,352,361,12,794,10,530,556,264,271,273',
'117,117,486,489,98,533,536,114,114,540,99,648,707,711,650,895,816,555',
'277,645,402,403,404,405,580,2,356,13,501,817,102,206,206,206,206,13',
'13,279,347,642,818,642,382,384,596,304,391,721,915,726,606,588,291,291',
'883,835,836,366,730,660,590,12,349,10,749,114,393,640,897,12,12,10,10',
'694,318,645,425,698,541,114,651,376,697,291,291,584,743,5,14,355,663',
'664,317,316,895,406,5,313,377,246,260,261,477,500,346,930,715,839,841',
'843,798,309,868,746,379,380,591,745,14,287,287,419,419,13,206,206,206',
'206,386,605,206,206,206,407,497,389,847,751,752,830,13,206,888,887,280',
'662,306,408,891,357,354,362,712,193,414,420,423,12,864,10,438,811,400',
'1,,,,,,,,,,,12,,10,496,248,669,,,428,433,,,248,14,,,495,249,114,206',
'206,14,14,,943,249,544,437,206,918,,328,13,521,,,285,13,,,,,,642,556',
',,703,,285,931,,,,,,268,,272,,13,,,510,691,701,12,589,10,,102,12,723',
'10,,699,,743,,,674,920,921,922,,745,,,,568,569,674,277,881,12,754,10',
'277,,,206,206,504,923,746,,,,505,14,,506,,,,205,512,,,517,361,,,,,945',
'14,,,291,,,206,648,650,413,,531,,532,,674,291,102,,,777,633,,674,307',
'784,280,937,,343,343,,585,343,872,,790,,,,,764,493,498,,,767,,,570,804',
'502,,808,809,,309,612,,,,613,,556,,892,14,893,623,,287,14,206,627,,343',
'343,343,343,,,,801,287,,,,291,,,671,,280,,14,782,783,280,,621,,117,',
',626,117,,,114,,,,114,,,825,,,,828,829,,,521,745,309,623,206,,623,,',
',13,,,,,,285,,206,799,437,,880,935,,,,,716,,,362,,206,647,35,725,649',
'642,,,,,,12,,10,13,13,,873,,440,441,695,,,,,,,,449,309,,35,284,284,13',
'903,666,309,13,932,653,654,910,13,,206,727,12,12,10,10,,,206,,,,206',
'437,206,,,775,351,365,,365,328,12,437,10,909,12,,10,291,,12,,10,708',
'708,,900,,250,250,250,,,206,206,,,,,206,,,728,35,,,,,,,,35,35,,13,785',
'291,,916,742,314,,437,760,762,13,521,437,,765,,206,,,,,792,13,13,14',
',,285,,750,287,,,12,,10,,285,,,419,,,936,12,623,10,,627,343,343,,,,845',
',12,12,10,10,,14,14,,,,,,362,823,,821,,,,,,,,,206,594,14,,35,13,14,688',
'689,13,13,14,,,,,,674,,,,35,,,,,,,704,,,13,706,,,321,,714,206,12,291',
'10,,12,12,10,10,826,,827,291,,381,831,383,383,387,390,383,,,,861,,,12',
'742,10,854,,,,,623,623,13,,,,14,,,,875,,,,35,,,14,284,35,,206,,13,13',
',,114,,14,14,284,776,,287,,12,,10,,,,35,779,287,,,,,307,,,,,,788,789',
'12,12,10,10,,,250,250,,860,,,,708,13,250,,,905,,,682,,938,,,437,,,13',
',,13,,,14,,,889,14,14,889,742,,742,365,742,,12,,10,,13,,908,886,,,309',
'13,851,14,,12,13,10,12,,10,,,,13,,206,,,,,343,,729,,,,,12,852,10,,,',
',12,,10,,,12,,10,742,,,,14,12,,10,,,291,,,492,,,,,,,,,742,,,14,14,,',
',867,,,,,,,,,,,,,,,,,437,,,,877,878,,,,,,,,,,,,,,,,,,,547,,14,547,547',
',907,,,,,,35,,,,,14,284,,14,,,,,,,,902,,,,,,,,,,,,14,,343,914,,,,14',
'641,35,35,,14,,,,365,,,,14,,,215,,,924,247,247,247,35,,,929,35,,,,933',
'35,,,,301,302,303,,,,,,,,,,,,,247,247,,,,687,,622,,,,315,,,,,,,,,,,',
',,,,,,,,,,,,,,,343,,,,,,,,,,,35,,,,,,,637,,,,35,,,,,622,,,622,637,,',
'35,35,,,,284,,637,637,,,,,,,284,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,641,,,,,,,35,,,,35,35,,,416,247,424,247,,,439,,,,417,421,,,,,,,35',
',215,,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466',
'467,468,469,470,471,472,473,474,475,476,,,,,,,,,247,,247,,,,35,247,',
',482,,484,247,247,,,485,,,,,247,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,527',
',622,,,,,,,,,795,800,,,,,,,,,,547,35,,547,547,904,,,,,795,,795,,,,35',
',,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,35,,,,,35,,,,,,,,35,,,,,,,,,,,,,,,',
'290,290,,,,,,290,290,290,,,,622,622,,,247,,,,,,290,,866,,616,,870,,290',
'290,,,,,,,,,,,247,,439,634,424,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,247,,247',
',247,,,,,,643,,315,,646,,,,,,658,,,,,547,,,,,659,,,,247,,,,,,,,,679',
'680,681,,,,,,,,,,247,,,247,,,,,,,643,,795,315,,,,,,,,,,,,,,795,,,,,',
',,,,,,,247,,,,,,,,247,,,,290,,290,290,290,290,290,290,290,290,290,290',
'290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,,756',
',247,,761,763,,290,,290,766,,757,768,290,,,,,,,773,,,,,,,,247,,,,,,',
',290,,778,,,247,,,,,,,,290,,643,,,,,,,290,,,,,,,,,,247,,,,,,,,,,797',
',,,,,,,,,,,,,,,,,,,,247,,,,,,,,,,417,,,,,,,,,,,290,,247,,,,,,,,,,833',
',,,,,,,,,247,855,,,,,,,,,853,761,763,766,,,,,,,,,,,,,,,247,,290,,,,',
',,,417,,,,,,,,,,,,,,,,,,,,290,290,290,,,,,,,,,,,,,,,,,,,,,,,,,,247,',
',,,290,,290,,290,896,,855,,,,,,,,,,,,,,,,,,,,,,,247,,290,,,,,,,,913',
',,290,290,290,,,,,,,247,,,290,,,290,,,,913,,,,,,,,290,,,,,,247,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,290,,290,,,,,',
',,,,,290,,,,,,,,290,,,,,,,,290,,,,,,,,,,,,,,,,,,,,,,,,290,,,,,,,,,,290',
',,,,,290,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,290,,,,,,,,,,,,,,,,,,,,,,,290',
',,,,,,,,,,,,,,,,,,,290,,,,,,,,,,,290,290,290,,,,,,,,,,,,,,,290,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,290,,,,,,,,,,,,290',
',,,,,,,,,,,,290,,,,,,,,,,290,,,,,,,,,,,,,,,,,,,,,,290' ]
        racc_goto_table = arr = ::Array.new(2340, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'21,59,22,78,10,32,29,29,29,102,46,47,33,33,105,41,108,21,21,54,54,54',
'21,21,21,47,24,24,14,14,21,21,21,145,20,43,17,29,57,57,75,75,82,139',
'81,76,16,16,18,104,16,107,21,21,107,107,35,21,21,42,7,21,21,21,20,11',
'17,8,143,34,34,34,50,50,33,33,4,55,55,48,48,55,6,58,77,77,58,149,11',
'146,38,152,16,16,16,16,45,2,17,21,114,87,81,21,21,21,21,21,21,39,88',
'60,89,60,124,124,127,51,124,90,91,92,127,93,52,52,94,140,140,95,96,60',
'97,20,4,17,98,48,47,36,99,20,20,17,17,109,100,152,22,109,101,48,36,83',
'103,52,52,80,108,7,23,79,36,36,74,72,149,7,7,71,70,31,31,31,111,113',
'86,115,116,141,141,141,117,29,118,139,122,123,84,109,23,23,23,54,54',
'21,21,21,21,21,125,126,21,21,21,2,62,128,129,130,131,133,21,21,135,137',
'9,61,85,27,142,19,23,23,78,15,18,18,18,20,12,17,18,147,5,1,,,,,,,,,',
',20,,17,29,29,43,,,33,33,,,29,23,,,54,54,48,21,21,23,23,,76,54,102,48',
'21,140,,105,21,41,,,21,21,,,,,,60,143,,,143,,21,11,,,,,,57,,57,,21,',
',42,104,146,20,46,17,,81,20,45,17,,145,,108,,,33,141,141,141,,109,,',
',16,16,33,38,77,20,127,17,38,,,21,21,4,82,139,,,,6,23,,39,,,,26,39,',
',51,21,,,,,141,23,,,52,,,21,58,58,9,,51,,51,,33,52,81,,,59,22,,33,26',
'32,9,10,,26,26,,81,26,109,,43,,,,,35,31,31,,,35,,,4,107,31,,107,107',
',29,14,,,,14,,143,,109,23,109,57,,23,23,21,57,,26,26,26,26,,,,55,23',
',,,52,,,22,,9,,23,33,33,9,,34,,50,,,34,50,,,48,,,,48,,,8,,,,8,8,,,41',
'109,29,57,21,,57,,,,21,,,,,,21,,21,24,48,,75,109,,,,,22,,,23,,21,34',
'44,22,34,60,,,,,,20,,17,21,21,,143,,26,26,21,,,,,,,,26,29,,44,44,44',
'21,75,7,29,21,78,51,51,75,21,,21,16,20,20,17,17,,,21,,,,21,48,21,,,102',
'44,44,,44,105,20,48,17,107,20,,17,52,,20,,17,81,81,,59,,56,56,56,,,21',
'21,,,,,21,,,81,44,,,,,,,,44,44,,21,29,52,,8,106,56,,48,18,18,21,41,48',
',18,,21,,,,,41,21,21,23,,,21,,51,23,,,20,,17,,21,,,54,,,8,20,57,17,',
'57,26,26,,,,47,,20,20,17,17,,23,23,,,,,,23,16,,54,,,,,,,,,21,26,23,',
'44,21,23,9,9,21,21,23,,,,,,33,,,,44,,,,,,,9,,,21,9,,,53,,9,21,20,52',
'17,,20,20,17,17,81,,81,52,,53,81,53,53,53,53,53,,,,54,,,20,106,17,18',
',,,,57,57,21,,,,23,,,,16,,,,44,,,23,44,44,,21,,21,21,,,48,,23,23,44',
'9,,23,,20,,17,,,,44,9,23,,,,,26,,,,,,9,9,20,20,17,17,,,56,56,,51,,,',
'81,21,56,,,21,,,26,,22,,,48,,,21,,,21,,,23,,,106,23,23,106,106,,106',
'44,106,,20,,17,,21,,17,51,,,29,21,23,23,,20,21,17,20,,17,,,,21,,21,',
',,,26,,26,,,,,20,9,17,,,,,20,,17,,,20,,17,106,,,,23,20,,17,,,52,,,53',
',,,,,,,,106,,,23,23,,,,9,,,,,,,,,,,,,,,,,48,,,,9,9,,,,,,,,,,,,,,,,,',
',53,,23,53,53,,23,,,,,,44,,,,,23,44,,23,,,,,,,,9,,,,,,,,,,,,23,,26,9',
',,,23,56,44,44,,23,,,,44,,,,23,,,28,,,9,28,28,28,44,,,9,44,,,,9,44,',
',,28,28,28,,,,,,,,,,,,,28,28,,,,56,,53,,,,25,,,,,,,,,,,,,,,,,,,,,,,',
',,,26,,,,,,,,,,,44,,,,,,,53,,,,44,,,,,53,,,53,53,,,44,44,,,,44,,53,53',
',,,,,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,,,,,,,44,,,,44,44',
',,28,28,28,28,,,28,,,,25,25,,,,,,,44,,28,,28,28,28,28,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,,,,,,,,,28,,28,,',
',44,28,,,25,,25,28,28,,,25,,,,,28,,,,,44,44,,,,,,,,,,,,,,,,,,,,,,,,28',
',53,,,,,,,,,53,53,,,,,,,,,,53,44,,53,53,44,,,,,53,,53,,,,44,,,44,,,',
',,,,,,,,,,,,,,,,44,,,,,,,44,,,,,44,,,,,,,,44,,,,,,,,,,,,,,,,37,37,,',
',,,37,37,37,,,,53,53,,,28,,,,,,37,,53,,25,,53,,37,37,,,,,,,,,,,28,,28',
'28,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,28,,28,,,,,,25,,25,,25,,,,,',
'28,,,,,53,,,,,25,,,,28,,,,,,,,,28,28,28,,,,,,,,,,28,,,28,,,,,,,25,,53',
'25,,,,,,,,,,,,,,53,,,,,,,,,,,,,28,,,,,,,,28,,,,37,,37,37,37,37,37,37',
'37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,,28,,28',
',28,28,,37,,37,28,,25,28,37,,,,,,,28,,,,,,,,28,,,,,,,,37,,25,,,28,,',
',,,,,37,,25,,,,,,,37,,,,,,,,,,28,,,,,,,,,,25,,,,,,,,,,,,,,,,,,,,,28',
',,,,,,,,,25,,,,,,,,,,,37,,28,,,,,,,,,,25,,,,,,,,,,28,28,,,,,,,,,25,28',
'28,28,,,,,,,,,,,,,,,28,,37,,,,,,,,25,,,,,,,,,,,,,,,,,,,,37,37,37,,,',
',,,,,,,,,,,,,,,,,,,,,,28,,,,,37,,37,,37,25,,28,,,,,,,,,,,,,,,,,,,,,',
',28,,37,,,,,,,,25,,,37,37,37,,,,,,,28,,,37,,,37,,,,25,,,,,,,,37,,,,',
',28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,37',
',,,,,,,,,,37,,,,,,,,37,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,',
'37,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,37',
',,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,37,37,37,,,,,,,,,,,,,,,37,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,37,,,,',
',,,,,,,,37,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,37' ]
        racc_goto_check = arr = ::Array.new(2340, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   235,    97,   nil,    73,   135,    79,    60,  -239,   186,
  -525,  -618,  -564,   nil,    21,   217,   -11,    36,    30,   159,
    34,     0,   -51,   160,  -170,  1078,   344,   110,  1068,   -16,
   nil,   149,  -260,  -188,    43,  -208,  -338,  1438,    60,    79,
   nil,   -16,    27,  -260,   530,  -263,   -53,   -54,    72,   nil,
    65,    76,    93,   700,    -3,  -233,   592,    12,  -403,  -249,
  -368,  -282,   -60,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   105,   115,   110,   nil,   108,  -304,  -659,  -484,  -346,    99,
  -206,    41,  -548,    88,  -188,   167,   117,  -606,    50,  -599,
  -459,  -761,  -463,  -241,  -701,    65,  -459,  -243,  -455,  -705,
    90,  -168,   -47,  -396,  -497,   -42,    55,  -272,  -574,  -401,
   nil,   -70,   nil,   -94,  -170,  -737,  -395,  -502,  -614,   nil,
   nil,   nil,   115,   114,    39,   123,  -185,  -264,   129,  -543,
  -389,  -389,   nil,  -521,   nil,  -620,   nil,  -619,   nil,  -547,
  -613,  -564,  -618,  -267,   nil,  -517,  -246,  -469,   nil,  -753,
   nil,   nil,  -390 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   350,   276,   nil,   529,
   nil,   814,   nil,   275,   nil,   nil,   nil,   210,    16,    11,
   211,   300,   nil,   209,   nil,   253,    15,   nil,    19,    20,
    21,   nil,    25,   677,   nil,   nil,   nil,    26,    29,   nil,
    31,    34,    33,   nil,   207,   360,   nil,   116,   431,   115,
    69,   nil,    42,   308,   310,   nil,   311,   429,   624,   478,
   251,   nil,   nil,   266,    43,    44,    45,    46,    47,    48,
    49,   nil,   267,    55,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   564,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   323,   322,   693,   325,   nil,   326,   327,
   245,   nil,   435,   nil,   nil,   nil,   nil,   nil,   nil,    68,
    70,    71,    72,   nil,   nil,   nil,   nil,   601,   nil,   nil,
   nil,   nil,   392,   733,   736,   741,   738,   739,   740,   890,
   nil,   nil,   744,   334,   329,   336,   nil,   558,   559,   748,
   339,   342,   258 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 141, :_reduce_none,
  2, 142, :_reduce_2,
  0, 143, :_reduce_3,
  1, 143, :_reduce_4,
  3, 143, :_reduce_5,
  1, 145, :_reduce_none,
  4, 145, :_reduce_7,
  4, 148, :_reduce_8,
  2, 149, :_reduce_9,
  0, 153, :_reduce_10,
  1, 153, :_reduce_11,
  3, 153, :_reduce_12,
  0, 167, :_reduce_13,
  4, 147, :_reduce_14,
  3, 147, :_reduce_15,
  3, 147, :_reduce_none,
  3, 147, :_reduce_17,
  2, 147, :_reduce_18,
  3, 147, :_reduce_19,
  3, 147, :_reduce_20,
  3, 147, :_reduce_21,
  3, 147, :_reduce_22,
  3, 147, :_reduce_23,
  4, 147, :_reduce_none,
  3, 147, :_reduce_25,
  3, 147, :_reduce_26,
  3, 147, :_reduce_27,
  6, 147, :_reduce_none,
  5, 147, :_reduce_29,
  5, 147, :_reduce_none,
  5, 147, :_reduce_none,
  3, 147, :_reduce_none,
  3, 147, :_reduce_33,
  3, 147, :_reduce_34,
  3, 147, :_reduce_35,
  1, 147, :_reduce_none,
  1, 166, :_reduce_none,
  3, 166, :_reduce_38,
  3, 166, :_reduce_39,
  2, 166, :_reduce_40,
  2, 166, :_reduce_41,
  1, 166, :_reduce_none,
  1, 156, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  2, 158, :_reduce_46,
  2, 158, :_reduce_47,
  2, 158, :_reduce_48,
  1, 170, :_reduce_none,
  4, 170, :_reduce_none,
  4, 170, :_reduce_none,
  4, 175, :_reduce_none,
  2, 169, :_reduce_53,
  3, 169, :_reduce_none,
  4, 169, :_reduce_55,
  5, 169, :_reduce_none,
  4, 169, :_reduce_57,
  5, 169, :_reduce_none,
  2, 169, :_reduce_59,
  2, 169, :_reduce_60,
  1, 159, :_reduce_61,
  3, 159, :_reduce_62,
  1, 179, :_reduce_63,
  3, 179, :_reduce_64,
  1, 178, :_reduce_65,
  2, 178, :_reduce_66,
  3, 178, :_reduce_67,
  5, 178, :_reduce_none,
  2, 178, :_reduce_69,
  4, 178, :_reduce_none,
  2, 178, :_reduce_71,
  1, 178, :_reduce_72,
  3, 178, :_reduce_none,
  1, 181, :_reduce_74,
  3, 181, :_reduce_75,
  2, 180, :_reduce_76,
  3, 180, :_reduce_77,
  1, 183, :_reduce_none,
  3, 183, :_reduce_none,
  1, 182, :_reduce_80,
  4, 182, :_reduce_81,
  3, 182, :_reduce_82,
  3, 182, :_reduce_none,
  3, 182, :_reduce_none,
  3, 182, :_reduce_none,
  2, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 157, :_reduce_88,
  4, 157, :_reduce_89,
  3, 157, :_reduce_90,
  3, 157, :_reduce_91,
  3, 157, :_reduce_92,
  3, 157, :_reduce_93,
  2, 157, :_reduce_94,
  1, 157, :_reduce_none,
  1, 185, :_reduce_none,
  2, 186, :_reduce_97,
  1, 186, :_reduce_98,
  3, 186, :_reduce_99,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_103,
  1, 187, :_reduce_104,
  1, 154, :_reduce_105,
  1, 154, :_reduce_none,
  1, 155, :_reduce_107,
  3, 155, :_reduce_108,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  3, 168, :_reduce_183,
  5, 168, :_reduce_184,
  3, 168, :_reduce_185,
  6, 168, :_reduce_186,
  5, 168, :_reduce_187,
  5, 168, :_reduce_none,
  5, 168, :_reduce_none,
  5, 168, :_reduce_none,
  4, 168, :_reduce_none,
  3, 168, :_reduce_none,
  3, 168, :_reduce_193,
  3, 168, :_reduce_194,
  3, 168, :_reduce_195,
  3, 168, :_reduce_196,
  3, 168, :_reduce_197,
  3, 168, :_reduce_198,
  3, 168, :_reduce_199,
  3, 168, :_reduce_200,
  4, 168, :_reduce_201,
  4, 168, :_reduce_202,
  2, 168, :_reduce_203,
  2, 168, :_reduce_204,
  3, 168, :_reduce_205,
  3, 168, :_reduce_206,
  3, 168, :_reduce_207,
  3, 168, :_reduce_208,
  3, 168, :_reduce_209,
  3, 168, :_reduce_210,
  3, 168, :_reduce_211,
  3, 168, :_reduce_212,
  3, 168, :_reduce_213,
  3, 168, :_reduce_214,
  3, 168, :_reduce_215,
  3, 168, :_reduce_216,
  3, 168, :_reduce_217,
  2, 168, :_reduce_218,
  2, 168, :_reduce_219,
  3, 168, :_reduce_220,
  3, 168, :_reduce_221,
  3, 168, :_reduce_222,
  3, 168, :_reduce_223,
  3, 168, :_reduce_224,
  5, 168, :_reduce_225,
  1, 168, :_reduce_none,
  1, 165, :_reduce_none,
  1, 162, :_reduce_228,
  2, 162, :_reduce_229,
  2, 162, :_reduce_230,
  4, 162, :_reduce_231,
  2, 162, :_reduce_232,
  3, 197, :_reduce_233,
  4, 197, :_reduce_234,
  4, 197, :_reduce_none,
  6, 197, :_reduce_none,
  1, 198, :_reduce_237,
  1, 198, :_reduce_none,
  1, 171, :_reduce_239,
  2, 171, :_reduce_240,
  2, 171, :_reduce_241,
  4, 171, :_reduce_242,
  1, 171, :_reduce_243,
  4, 201, :_reduce_none,
  1, 201, :_reduce_none,
  0, 203, :_reduce_246,
  2, 174, :_reduce_247,
  1, 202, :_reduce_none,
  2, 202, :_reduce_249,
  3, 202, :_reduce_250,
  2, 200, :_reduce_251,
  2, 199, :_reduce_252,
  0, 199, :_reduce_253,
  1, 194, :_reduce_254,
  2, 194, :_reduce_255,
  3, 194, :_reduce_256,
  4, 194, :_reduce_257,
  3, 164, :_reduce_258,
  4, 164, :_reduce_259,
  2, 164, :_reduce_260,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  0, 225, :_reduce_270,
  4, 192, :_reduce_271,
  4, 192, :_reduce_272,
  3, 192, :_reduce_273,
  3, 192, :_reduce_274,
  2, 192, :_reduce_275,
  4, 192, :_reduce_276,
  3, 192, :_reduce_277,
  3, 192, :_reduce_278,
  1, 192, :_reduce_279,
  4, 192, :_reduce_280,
  3, 192, :_reduce_281,
  1, 192, :_reduce_282,
  5, 192, :_reduce_283,
  4, 192, :_reduce_284,
  3, 192, :_reduce_285,
  2, 192, :_reduce_286,
  1, 192, :_reduce_none,
  2, 192, :_reduce_288,
  2, 192, :_reduce_289,
  6, 192, :_reduce_290,
  6, 192, :_reduce_291,
  0, 226, :_reduce_292,
  0, 227, :_reduce_293,
  7, 192, :_reduce_294,
  0, 228, :_reduce_295,
  0, 229, :_reduce_296,
  7, 192, :_reduce_297,
  5, 192, :_reduce_298,
  4, 192, :_reduce_299,
  5, 192, :_reduce_300,
  0, 230, :_reduce_301,
  0, 231, :_reduce_302,
  9, 192, :_reduce_303,
  0, 232, :_reduce_304,
  6, 192, :_reduce_305,
  0, 233, :_reduce_306,
  0, 234, :_reduce_307,
  8, 192, :_reduce_308,
  0, 235, :_reduce_309,
  0, 236, :_reduce_310,
  6, 192, :_reduce_311,
  0, 237, :_reduce_312,
  6, 192, :_reduce_313,
  0, 238, :_reduce_314,
  0, 239, :_reduce_315,
  9, 192, :_reduce_316,
  1, 192, :_reduce_317,
  1, 192, :_reduce_318,
  1, 192, :_reduce_319,
  1, 192, :_reduce_none,
  1, 161, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  2, 215, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  2, 214, :_reduce_329,
  3, 240, :_reduce_330,
  2, 240, :_reduce_331,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  3, 241, :_reduce_334,
  3, 241, :_reduce_335,
  1, 216, :_reduce_336,
  5, 216, :_reduce_337,
  1, 151, :_reduce_none,
  2, 151, :_reduce_339,
  1, 243, :_reduce_340,
  3, 243, :_reduce_341,
  3, 244, :_reduce_342,
  1, 176, :_reduce_none,
  2, 176, :_reduce_344,
  1, 176, :_reduce_345,
  3, 176, :_reduce_346,
  1, 245, :_reduce_347,
  2, 247, :_reduce_348,
  1, 247, :_reduce_349,
  6, 242, :_reduce_350,
  4, 242, :_reduce_351,
  4, 242, :_reduce_352,
  2, 242, :_reduce_353,
  2, 242, :_reduce_354,
  4, 242, :_reduce_355,
  2, 242, :_reduce_356,
  2, 242, :_reduce_357,
  1, 242, :_reduce_358,
  0, 251, :_reduce_359,
  5, 250, :_reduce_360,
  2, 172, :_reduce_361,
  4, 172, :_reduce_none,
  4, 172, :_reduce_none,
  2, 213, :_reduce_364,
  4, 213, :_reduce_365,
  3, 213, :_reduce_366,
  4, 213, :_reduce_367,
  3, 213, :_reduce_368,
  2, 213, :_reduce_369,
  1, 213, :_reduce_370,
  0, 253, :_reduce_371,
  5, 212, :_reduce_372,
  0, 254, :_reduce_373,
  5, 212, :_reduce_374,
  0, 256, :_reduce_375,
  6, 218, :_reduce_376,
  1, 255, :_reduce_377,
  1, 255, :_reduce_none,
  6, 150, :_reduce_379,
  0, 150, :_reduce_380,
  1, 257, :_reduce_381,
  1, 257, :_reduce_none,
  1, 257, :_reduce_none,
  2, 258, :_reduce_384,
  1, 258, :_reduce_385,
  2, 152, :_reduce_386,
  1, 152, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 205, :_reduce_391,
  1, 261, :_reduce_none,
  2, 261, :_reduce_393,
  3, 262, :_reduce_394,
  1, 262, :_reduce_395,
  3, 206, :_reduce_396,
  3, 207, :_reduce_397,
  3, 208, :_reduce_398,
  3, 208, :_reduce_399,
  1, 265, :_reduce_400,
  3, 265, :_reduce_401,
  1, 266, :_reduce_402,
  2, 266, :_reduce_403,
  3, 209, :_reduce_404,
  3, 209, :_reduce_405,
  1, 268, :_reduce_406,
  3, 268, :_reduce_407,
  1, 263, :_reduce_408,
  2, 263, :_reduce_409,
  1, 264, :_reduce_410,
  2, 264, :_reduce_411,
  1, 267, :_reduce_412,
  0, 270, :_reduce_413,
  3, 267, :_reduce_414,
  0, 271, :_reduce_415,
  4, 267, :_reduce_416,
  1, 269, :_reduce_417,
  1, 269, :_reduce_418,
  1, 269, :_reduce_419,
  1, 269, :_reduce_none,
  2, 190, :_reduce_421,
  1, 190, :_reduce_422,
  1, 272, :_reduce_none,
  1, 272, :_reduce_none,
  1, 272, :_reduce_none,
  1, 272, :_reduce_none,
  3, 260, :_reduce_427,
  1, 259, :_reduce_428,
  1, 259, :_reduce_429,
  2, 259, :_reduce_430,
  2, 259, :_reduce_431,
  2, 259, :_reduce_432,
  2, 259, :_reduce_433,
  1, 184, :_reduce_434,
  1, 184, :_reduce_435,
  1, 184, :_reduce_436,
  1, 184, :_reduce_437,
  1, 184, :_reduce_438,
  1, 184, :_reduce_439,
  1, 184, :_reduce_440,
  1, 184, :_reduce_441,
  1, 184, :_reduce_442,
  1, 184, :_reduce_443,
  1, 184, :_reduce_444,
  1, 210, :_reduce_445,
  1, 160, :_reduce_446,
  1, 163, :_reduce_447,
  1, 163, :_reduce_none,
  1, 220, :_reduce_449,
  3, 220, :_reduce_450,
  2, 220, :_reduce_451,
  4, 222, :_reduce_452,
  2, 222, :_reduce_453,
  1, 274, :_reduce_none,
  1, 274, :_reduce_none,
  2, 275, :_reduce_456,
  1, 275, :_reduce_457,
  1, 276, :_reduce_458,
  2, 277, :_reduce_459,
  1, 277, :_reduce_460,
  1, 278, :_reduce_461,
  3, 278, :_reduce_462,
  4, 279, :_reduce_463,
  2, 279, :_reduce_464,
  2, 279, :_reduce_465,
  1, 279, :_reduce_466,
  2, 281, :_reduce_467,
  0, 281, :_reduce_468,
  6, 273, :_reduce_469,
  4, 273, :_reduce_470,
  4, 273, :_reduce_471,
  2, 273, :_reduce_472,
  4, 273, :_reduce_473,
  2, 273, :_reduce_474,
  2, 273, :_reduce_475,
  1, 273, :_reduce_476,
  0, 273, :_reduce_477,
  1, 283, :_reduce_none,
  1, 283, :_reduce_479,
  1, 284, :_reduce_480,
  1, 284, :_reduce_481,
  1, 284, :_reduce_482,
  1, 284, :_reduce_483,
  1, 285, :_reduce_484,
  3, 285, :_reduce_485,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 287, :_reduce_488,
  3, 287, :_reduce_none,
  1, 288, :_reduce_490,
  3, 288, :_reduce_491,
  1, 286, :_reduce_none,
  4, 286, :_reduce_none,
  3, 286, :_reduce_none,
  2, 286, :_reduce_none,
  1, 286, :_reduce_none,
  1, 248, :_reduce_497,
  3, 248, :_reduce_498,
  3, 289, :_reduce_499,
  1, 282, :_reduce_500,
  3, 282, :_reduce_501,
  1, 290, :_reduce_none,
  1, 290, :_reduce_none,
  2, 249, :_reduce_504,
  1, 249, :_reduce_505,
  1, 291, :_reduce_none,
  1, 291, :_reduce_none,
  2, 246, :_reduce_508,
  2, 280, :_reduce_509,
  0, 280, :_reduce_510,
  1, 223, :_reduce_511,
  4, 223, :_reduce_512,
  0, 211, :_reduce_513,
  2, 211, :_reduce_514,
  1, 196, :_reduce_515,
  3, 196, :_reduce_516,
  3, 292, :_reduce_517,
  2, 292, :_reduce_518,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  0, 144, :_reduce_none,
  1, 144, :_reduce_none,
  0, 191, :_reduce_none,
  1, 191, :_reduce_none,
  0, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 146, :_reduce_none,
  2, 146, :_reduce_none,
  0, 193, :_reduce_542 ]

racc_reduce_n = 543

racc_shift_n = 948

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :ARRAY_BEG => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tPLUS => 104,
  :tMINUS => 105,
  :tLT => 106,
  :tGT => 107,
  :tPIPE => 108,
  :tBANG => 109,
  :tCARET => 110,
  :tLCURLY => 111,
  :tRCURLY => 112,
  :tBACK_REF2 => 113,
  :tSYMBEG => 114,
  :tSTRING_BEG => 115,
  :tXSTRING_BEG => 116,
  :tREGEXP_BEG => 117,
  :tWORDS_BEG => 118,
  :tAWORDS_BEG => 119,
  :tSTRING_DBEG => 120,
  :tSTRING_DVAR => 121,
  :tSTRING_END => 122,
  :tSTRING => 123,
  :tSYMBOL => 124,
  :tNL => 125,
  :tEH => 126,
  :tCOLON => 127,
  :tCOMMA => 128,
  :tSPACE => 129,
  :tSEMI => 130,
  :tLAMBDA => 131,
  :tLAMBEG => 132,
  :tLBRACK2 => 133,
  :tLBRACK => 134,
  :tDSTAR => 135,
  :tEQL => 136,
  :tLOWEST => 137,
  "-@NUM" => 138,
  "+@NUM" => 139 }

racc_nt_base = 140

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "ARRAY_BEG",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tLBRACK2",
  "tLBRACK",
  "tDSTAR",
  "tEQL",
  "tLOWEST",
  "\"-@NUM\"",
  "\"+@NUM\"",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "opt_nl",
  "primary",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@2",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@3",
  "@4",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "f_larglist",
  "lambda_body",
  "block_param",
  "f_block_optarg",
  "f_block_opt",
  "block_args_tail",
  "f_block_arg",
  "opt_block_args_tail",
  "f_arg",
  "f_rest_arg",
  "do_block",
  "@18",
  "operation3",
  "@19",
  "@20",
  "cases",
  "@21",
  "exc_list",
  "exc_var",
  "numeric",
  "dsym",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@22",
  "@23",
  "sym",
  "f_args",
  "kwrest_mark",
  "f_kwrest",
  "f_label",
  "f_kw",
  "f_kwarg",
  "args_tail",
  "opt_f_block_arg",
  "opt_args_tail",
  "f_optarg",
  "f_norm_arg",
  "f_bad_arg",
  "f_arg_item",
  "f_margs",
  "f_marg",
  "f_marg_list",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = new_compstmt val[0]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_block
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_block val[0]
                    
    result
end

def _reduce_5(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      result = new_body(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = new_compstmt val[0]
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_block
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_block val[0]
                    
    result
end

def _reduce_12(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_13(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_14(val, _values, result)
                      result = new_alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_15(val, _values, result)
                      result = s(:valias, value(val[1]).to_sym, value(val[2]).to_sym)
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      result = s(:valias, value(val[1]).to_sym, value(val[2]).to_sym)
                    
    result
end

def _reduce_18(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_19(val, _values, result)
                      result = new_if(val[1], val[2], val[0], nil)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = new_if(val[1], val[2], nil, val[0])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_while(val[1], val[2], val[0])
                    
    result
end

def _reduce_22(val, _values, result)
                      result = new_until(val[1], val[2], val[0])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_rescue_mod(val[1], val[0], val[2])
                    
    result
end

# reduce 24 omitted

def _reduce_25(val, _values, result)
                      result = new_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:masgn, val[0], s(:to_ary, val[2]))
                    
    result
end

def _reduce_27(val, _values, result)
                      result = new_op_asgn val[1], val[0], val[2]
                    
    result
end

# reduce 28 omitted

def _reduce_29(val, _values, result)
                      result = s(:op_asgn2, val[0], op_to_setter(val[2]), value(val[3]).to_sym, val[4])
                    
    result
end

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

def _reduce_33(val, _values, result)
                      result = new_assign val[0], val[1], s(:svalue, val[2])
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:masgn, val[0], s(:to_ary, val[2]))
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:masgn, val[0], val[2])
                    
    result
end

# reduce 36 omitted

# reduce 37 omitted

def _reduce_38(val, _values, result)
                      result = s(:and, val[0], val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = s(:or, val[0], val[2])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = new_unary_call(['!', []], val[1])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = new_unary_call(val[0], val[1])
                    
    result
end

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

def _reduce_46(val, _values, result)
                      result = new_return(val[0], val[1])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = new_break(val[0], val[1])
                    
    result
end

def _reduce_48(val, _values, result)
                      result = new_next(val[0], val[1])
                    
    result
end

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call(nil, val[0], val[1])
                    
    result
end

# reduce 54 omitted

def _reduce_55(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                    result = new_call(val[0], val[2], val[3])
                  
    result
end

# reduce 58 omitted

def _reduce_59(val, _values, result)
                      result = new_super(val[0], val[1])
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_62(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_63(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_64(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_66(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      result = val[0] << s(:splat, val[2])
                    
    result
end

# reduce 68 omitted

def _reduce_69(val, _values, result)
                      result = val[0] << s(:splat)
                    
    result
end

# reduce 70 omitted

def _reduce_71(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_72(val, _values, result)
                      result = s(:array, s(:splat))
                    
    result
end

# reduce 73 omitted

def _reduce_74(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

# reduce 78 omitted

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_81(val, _values, result)
                      args = val[2] ? val[2] : []
                      result = s(:attrasgn, val[0], :[]=, s(:arglist, *args))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = new_call val[0], val[2], []
                    
    result
end

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

def _reduce_88(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = new_attrasgn(val[0], :[]=, val[2])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_91(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn(val[0], op_to_setter(val[2]))
                    
    result
end

def _reduce_93(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

# reduce 95 omitted

# reduce 96 omitted

def _reduce_97(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = new_const(val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

def _reduce_103(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_104(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_105(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

# reduce 106 omitted

def _reduce_107(val, _values, result)
                      result = s(:undef, val[0])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

def _reduce_183(val, _values, result)
                      result = new_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_184(val, _values, result)
                      result = new_assign val[0], val[1], s(:rescue_mod, val[2], val[4])
                    
    result
end

def _reduce_185(val, _values, result)
                      result = new_op_asgn val[1], val[0], val[2]
                    
    result
end

def _reduce_186(val, _values, result)
                      result = new_op_asgn1(val[0], val[2], val[4], val[5])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = s(:op_asgn2, val[0], op_to_setter(val[2]), value(val[3]).to_sym, val[4])
                    
    result
end

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

def _reduce_193(val, _values, result)
                      result = new_irange(val[0], val[1], val[2])
                    
    result
end

def _reduce_194(val, _values, result)
                      result = new_erange(val[0], val[1], val[2])
                    
    result
end

def _reduce_195(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_call new_binary_call(new_int(val[1]), val[2], val[3]), [:"-@", []], []
                    
    result
end

def _reduce_202(val, _values, result)
                      result = new_call new_binary_call(new_float(val[1]), val[2], val[3]), [:"-@", []], []
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_call val[1], [:"+@", []], []
                      if [:int, :float].include? val[1].type
                        result = val[1]
                      end
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_call val[1], [:"-@", []], []
                      if val[1].type == :int
                        val[1][1] = -val[1][1]
                        result = val[1]
                      elsif val[1].type == :float
                        val[1][1] = -val[1][1].to_f
                        result = val[1]
                      end
                    
    result
end

def _reduce_205(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_unary_call(['!', []], new_binary_call(
                                 val[0], ['==', []], val[2]))
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_not(val[1], new_binary_call(
                                 val[0], ['=~', []], val[2]))
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_unary_call(val[0], val[1])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_unary_call(val[0], val[1])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_binary_call(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_and(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_or(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_if(val[1], val[0], val[2], val[4])
                    
    result
end

# reduce 226 omitted

# reduce 227 omitted

def _reduce_228(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_229(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_230(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_231(val, _values, result)
                      val[0] << s(:hash, *val[2])
                      result = val[0]
                    
    result
end

def _reduce_232(val, _values, result)
                      result = [s(:hash, *val[0])]
                    
    result
end

def _reduce_233(val, _values, result)
                      result = []
                    
    result
end

def _reduce_234(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 235 omitted

# reduce 236 omitted

def _reduce_237(val, _values, result)
                      result = []
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_240(val, _values, result)
                      result = val[0]
                      add_block_pass val[0], val[1]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = [new_hash(nil, val[0], nil)]
                      add_block_pass result, val[1]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = val[0]
                      result << new_hash(nil, val[2], nil)
                    
    result
end

def _reduce_243(val, _values, result)
                      result = []
                      add_block_pass result, val[0]
                    
    result
end

# reduce 244 omitted

# reduce 245 omitted

def _reduce_246(val, _values, result)
                      lexer.cmdarg_push 1
                    
    result
end

def _reduce_247(val, _values, result)
                      lexer.cmdarg_pop
                      result = val[1]
                    
    result
end

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_250(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = new_block_pass(val[0], val[1])
                    
    result
end

def _reduce_252(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_253(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = [new_splat(val[0], val[1])]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_257(val, _values, result)
                      result  = val[0] << new_splat(val[2], val[3])
                    
    result
end

def _reduce_258(val, _values, result)
                      val[0] << val[2]
                      result = s(:array, *val[0])
                    
    result
end

def _reduce_259(val, _values, result)
                      val[0] << s(:splat, val[3])
                      result = s(:array, *val[0])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

def _reduce_270(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_271(val, _values, result)
                      result = s(:begin, val[2])
                    
    result
end

def _reduce_272(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = new_paren(val[0], val[1], val[2])
                    
    result
end

def _reduce_274(val, _values, result)
                      result = new_colon2(val[0], val[1], val[2])
                    
    result
end

def _reduce_275(val, _values, result)
                      result = new_colon3(val[0], val[1])
                    
    result
end

def _reduce_276(val, _values, result)
                      result = new_call val[0], [:[], []], val[2]
                    
    result
end

def _reduce_277(val, _values, result)
                      result = new_array(val[0], val[1], val[2])
                    
    result
end

def _reduce_278(val, _values, result)
                      result = new_hash(val[0], val[1], val[2])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = new_return(val[0])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_281(val, _values, result)
                      result = s(:yield)
                    
    result
end

def _reduce_282(val, _values, result)
                      result = s(:yield)
                    
    result
end

def _reduce_283(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_284(val, _values, result)
                      result = new_unary_call(['!', []], val[2])
                    
    result
end

def _reduce_285(val, _values, result)
                      result = new_unary_call(['!', []], new_nil(val[0]))
                    
    result
end

def _reduce_286(val, _values, result)
                      result = new_call(nil, val[0], [])
                      result << val[1]
                    
    result
end

# reduce 287 omitted

def _reduce_288(val, _values, result)
                      val[0] << val[1]
                      result = val[0]
                    
    result
end

def _reduce_289(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_290(val, _values, result)
                      result = new_if(val[0], val[1], val[3], val[4])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = new_if(val[0], val[1], val[4], val[3])
                    
    result
end

def _reduce_292(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_293(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_294(val, _values, result)
                      result = s(:while, val[2], val[5])
                    
    result
end

def _reduce_295(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_296(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:until, val[2], val[5])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:case, val[1], *val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:case, nil, *val[2])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = s(:case, nil, val[3])
                    
    result
end

def _reduce_301(val, _values, result)
                      lexer.cond_push 1
                      result = lexer.line
                    
    result
end

def _reduce_302(val, _values, result)
                      lexer.cond_pop
                    
    result
end

def _reduce_303(val, _values, result)
                      result = s(:for, val[4], val[1], val[7])
                    
    result
end

def _reduce_304(val, _values, result)
                      # ...
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_class val[0], val[1], val[2], val[4], val[5]
                    
    result
end

def _reduce_306(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_307(val, _values, result)
                      # ...
                    
    result
end

def _reduce_308(val, _values, result)
                      result = new_sclass(val[0], val[3], val[6], val[7])
                    
    result
end

def _reduce_309(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_310(val, _values, result)
                      # ...
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_module(val[0], val[2], val[4], val[5])
                    
    result
end

def _reduce_312(val, _values, result)
                      push_scope
                    
    result
end

def _reduce_313(val, _values, result)
                      result = new_def(val[0], nil, val[1], val[3], val[4], val[5])
                      pop_scope
                    
    result
end

def _reduce_314(val, _values, result)
                       lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_315(val, _values, result)
                      push_scope
                    
    result
end

def _reduce_316(val, _values, result)
                      result = new_def(val[0], val[1], val[4], val[6], val[7], val[8])
                      pop_scope
                    
    result
end

def _reduce_317(val, _values, result)
                      result = new_break(val[0])
                    
    result
end

def _reduce_318(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_319(val, _values, result)
                      result = s(:redo)
                    
    result
end

# reduce 320 omitted

# reduce 321 omitted

# reduce 322 omitted

# reduce 323 omitted

# reduce 324 omitted

# reduce 325 omitted

# reduce 326 omitted

# reduce 327 omitted

# reduce 328 omitted

def _reduce_329(val, _values, result)
                      result = new_call nil, [:lambda, []], []
                      result << new_iter(val[0], val[1])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_331(val, _values, result)
                      result = nil
                    
    result
end

# reduce 332 omitted

# reduce 333 omitted

def _reduce_334(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_335(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_336(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_337(val, _values, result)
                      result = new_if(val[0], val[1], val[3], val[4])
                    
    result
end

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_340(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_341(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_342(val, _values, result)
                      result = new_assign(new_assignable(new_ident(
                                  val[0])), val[1], val[2])
                    
    result
end

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_345(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_346(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_349(val, _values, result)
                      nil
                    
    result
end

def _reduce_350(val, _values, result)
                      result = new_block_args(val[0], val[2], val[4], val[5])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = new_block_args(val[0], val[2], nil, val[3])
                    
    result
end

def _reduce_352(val, _values, result)
                      result = new_block_args(val[0], nil, val[2], val[3])
                    
    result
end

def _reduce_353(val, _values, result)
                      result = new_block_args(val[0], nil, nil, nil)
                    
    result
end

def _reduce_354(val, _values, result)
                      result = new_block_args(val[0], nil, nil, val[1])
                    
    result
end

def _reduce_355(val, _values, result)
                      result = new_block_args(nil, val[0], val[2], val[3])
                    
    result
end

def _reduce_356(val, _values, result)
                      result = new_block_args(nil, val[0], nil, val[1])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = new_block_args(nil, nil, val[0], val[1])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = new_block_args(nil, nil, nil, val[0])
                    
    result
end

def _reduce_359(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_360(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_361(val, _values, result)
                      val[0] << val[1]
                      result = val[0]
                    
    result
end

# reduce 362 omitted

# reduce 363 omitted

def _reduce_364(val, _values, result)
                      result = new_call(nil, val[0], val[1])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = new_call(val[0], [:call, []], val[2])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = new_call(val[0], val[2], val[3])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = new_call(val[0], val[2])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = new_super(val[0], val[1])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = new_super(val[0], nil)
                    
    result
end

def _reduce_371(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_372(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_373(val, _values, result)
                      push_scope :block
                      result = lexer.line
                    
    result
end

def _reduce_374(val, _values, result)
                      result = new_iter val[2], val[3]
                      pop_scope
                    
    result
end

def _reduce_375(val, _values, result)
                      result = lexer.line
                    
    result
end

def _reduce_376(val, _values, result)
                      part = s(:when, s(:array, *val[2]), val[4])
                      result = [part]
                      result.push(*val[5]) if val[5]
                    
    result
end

def _reduce_377(val, _values, result)
                      result = [val[0]]
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      exc = val[1] || s(:array)
                      exc << new_assign(val[2], val[2], s(:gvar, '$!'.intern)) if val[2]
                      result = [s(:resbody, exc, val[4])]
                      result.push val[5].first if val[5]
                    
    result
end

def _reduce_380(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_381(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 382 omitted

# reduce 383 omitted

def _reduce_384(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_385(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[1].nil? ? s(:nil) : val[1]
                    
    result
end

# reduce 387 omitted

# reduce 388 omitted

# reduce 389 omitted

# reduce 390 omitted

def _reduce_391(val, _values, result)
                      result = new_str val[0]
                    
    result
end

# reduce 392 omitted

def _reduce_393(val, _values, result)
                    result = str_append val[0], val[1]
                  
    result
end

def _reduce_394(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_395(val, _values, result)
                      result = s(:str, value(val[0]))
                    
    result
end

def _reduce_396(val, _values, result)
                      result = new_xstr(val[0], val[1], val[2])
                    
    result
end

def _reduce_397(val, _values, result)
                      result = new_regexp val[1], val[2]
                    
    result
end

def _reduce_398(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_399(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_400(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_401(val, _values, result)
                      part = val[1]
                      part = s(:dstr, "", val[1]) if part.type == :evstr
                      result = val[0] << part
                    
    result
end

def _reduce_402(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_403(val, _values, result)
                      result = val[0].concat([val[1]])
                    
    result
end

def _reduce_404(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_405(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_406(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[0] << s(:str, value(val[1]))
                    
    result
end

def _reduce_408(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_409(val, _values, result)
                      result = str_append val[0], val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_411(val, _values, result)
                      result = str_append val[0], val[1]
                    
    result
end

def _reduce_412(val, _values, result)
                      result = new_str_content(val[0])
                    
    result
end

def _reduce_413(val, _values, result)
                      result = lexer.strterm
                      lexer.strterm = nil
                    
    result
end

def _reduce_414(val, _values, result)
                      lexer.strterm = val[1]
                      result = new_evstr(val[2])
                    
    result
end

def _reduce_415(val, _values, result)
                      lexer.cond_push 0
                      lexer.cmdarg_push 0
                      result = lexer.strterm
                      lexer.strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_416(val, _values, result)
                      lexer.strterm = val[1]
                      lexer.cond_lexpop
                      lexer.cmdarg_lexpop
                      result = new_evstr(val[2])
                    
    result
end

def _reduce_417(val, _values, result)
                      result = new_gvar(val[0])
                    
    result
end

def _reduce_418(val, _values, result)
                      result = new_ivar(val[0])
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_cvar(val[0])
                    
    result
end

# reduce 420 omitted

def _reduce_421(val, _values, result)
                      result = new_sym(val[1])
                      lexer.lex_state = :expr_end
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

# reduce 423 omitted

# reduce 424 omitted

# reduce 425 omitted

# reduce 426 omitted

def _reduce_427(val, _values, result)
                      result = new_dsym val[1]
                    
    result
end

def _reduce_428(val, _values, result)
                      result = new_int(val[0])
                    
    result
end

def _reduce_429(val, _values, result)
                      result = new_float(val[0])
                    
    result
end

def _reduce_430(val, _values, result)
                    result = negate_num(new_int(val[1]))
                  
    result
end

def _reduce_431(val, _values, result)
                    result = negate_num(new_float(val[1]))
                  
    result
end

def _reduce_432(val, _values, result)
                    result = new_int(val[1])
                  
    result
end

def _reduce_433(val, _values, result)
                    result = new_float(val[1])
                  
    result
end

def _reduce_434(val, _values, result)
                      result = new_ident(val[0])
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_ivar(val[0])
                    
    result
end

def _reduce_436(val, _values, result)
                      result = new_gvar(val[0])
                    
    result
end

def _reduce_437(val, _values, result)
                      result = new_const(val[0])
                    
    result
end

def _reduce_438(val, _values, result)
                      result = new_cvar(val[0])
                    
    result
end

def _reduce_439(val, _values, result)
                      result = new_nil(val[0])
                    
    result
end

def _reduce_440(val, _values, result)
                      result = new_self(val[0])
                    
    result
end

def _reduce_441(val, _values, result)
                      result = new_true(val[0])
                    
    result
end

def _reduce_442(val, _values, result)
                      result = new_false(val[0])
                    
    result
end

def _reduce_443(val, _values, result)
                      result = new___FILE__(val[0])
                    
    result
end

def _reduce_444(val, _values, result)
                      result = new___LINE__(val[0])
                    
    result
end

def _reduce_445(val, _values, result)
                      result = new_var_ref(val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = new_assignable val[0]
                    
    result
end

def _reduce_447(val, _values, result)
                      result = s(:nth_ref, value(val[0]))
                    
    result
end

# reduce 448 omitted

def _reduce_449(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_450(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_451(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 454 omitted

# reduce 455 omitted

def _reduce_456(val, _values, result)
                      result = new_kwrestarg(val[1])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = new_kwrestarg()
                    
    result
end

def _reduce_458(val, _values, result)
                      result = new_sym(val[0])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = new_kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = new_kwarg(val[0])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_463(val, _values, result)
                      result = new_args_tail(val[0], val[2], val[3])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = new_args_tail(val[0], nil, val[1])
                    
    result
end

def _reduce_465(val, _values, result)
                      result = new_args_tail(nil, val[0], val[1])
                    
    result
end

def _reduce_466(val, _values, result)
                      result = new_args_tail(nil, nil, val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_468(val, _values, result)
                      result = new_args_tail(nil, nil, nil)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = new_args(val[0], val[2], val[4], val[5])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = new_args(val[0], val[2], nil, val[3])
                    
    result
end

def _reduce_471(val, _values, result)
                      result = new_args(val[0], nil, val[2], val[3])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_args(val[0], nil, nil, val[1])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = new_args(nil, val[0], val[2], val[3])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_args(nil, val[0], nil, val[1])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = new_args(nil, nil, val[0], val[1])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = new_args(nil, nil, nil, val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = new_args(nil, nil, nil, nil)
                    
    result
end

# reduce 478 omitted

def _reduce_479(val, _values, result)
                      result = value(val[0]).to_sym
                      scope.add_local result
                    
    result
end

def _reduce_480(val, _values, result)
                      raise 'formal argument cannot be a constant'
                    
    result
end

def _reduce_481(val, _values, result)
                      raise 'formal argument cannot be an instance variable'
                    
    result
end

def _reduce_482(val, _values, result)
                      raise 'formal argument cannot be a class variable'
                    
    result
end

def _reduce_483(val, _values, result)
                      raise 'formal argument cannot be a global variable'
                    
    result
end

def _reduce_484(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_485(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 486 omitted

# reduce 487 omitted

def _reduce_488(val, _values, result)
                      result = s(:lasgn, val[0])
                    
    result
end

# reduce 489 omitted

def _reduce_490(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      result = [val[0]]
                    
    result
end

def _reduce_498(val, _values, result)
                      val[0] << val[2]
                      result = val[0]
                    
    result
end

def _reduce_499(val, _values, result)
                      result = new_assign(new_assignable(new_ident(val[0])), val[1], val[2])
                    
    result
end

def _reduce_500(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = val[0]
                      val[0] << val[2]
                    
    result
end

# reduce 502 omitted

# reduce 503 omitted

def _reduce_504(val, _values, result)
                      result = "*#{value(val[1])}".to_sym
                    
    result
end

def _reduce_505(val, _values, result)
                      result = :"*"
                    
    result
end

# reduce 506 omitted

# reduce 507 omitted

def _reduce_508(val, _values, result)
                      result = "&#{value(val[1])}".to_sym
                    
    result
end

def _reduce_509(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_510(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_512(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_513(val, _values, result)
                      result = []
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0].push(*val[2])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = [val[0], val[2]]
                    
    result
end

def _reduce_518(val, _values, result)
                      result = [new_sym(val[0]), val[1]]
                    
    result
end

# reduce 519 omitted

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

# reduce 539 omitted

# reduce 540 omitted

# reduce 541 omitted

def _reduce_542(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Opal
