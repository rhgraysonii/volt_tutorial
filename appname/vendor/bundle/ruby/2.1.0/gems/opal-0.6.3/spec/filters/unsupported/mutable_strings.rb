opal_filter "Mutable strings are not supported in Opal" do
  fails "String#upcase! raises a RuntimeError when self is frozen"
  fails "String#upcase! returns nil if no modifications were made"
  fails "String#upcase! modifies self in place"
  fails "String#swapcase! modifies self in place"
  fails "String#swapcase! returns nil if no modifications were made"
  fails "String#swapcase! raises a RuntimeError when self is frozen"
  fails "String#reverse! raises a RuntimeError on a frozen instance that would not be modified"
  fails "String#reverse! raises a RuntimeError on a frozen instance that is modified"
  fails "String#reverse! reverses self in place and always returns self"
  fails "String#downcase! raises a RuntimeError when self is frozen"
  fails "String#downcase! returns nil if no modifications were made"
  fails "String#downcase! modifies self in place"
  fails "String#capitalize! raises a RuntimeError when self is frozen"
  fails "String#capitalize! returns nil when no changes are made"
  fails "String#capitalize! capitalizes self in place"
  fails "String#chomp! when passed a String does not taint the result when the argument is tainted"
  fails "String#chomp! when passed a String taints the result if self is tainted"
  fails "String#chomp! when passed a String returns nil when self is empty"
  fails "String#chomp! when passed a String returns nil if the argument does not match the trailing characters"
  fails "String#chomp! when passed a String removes the trailing characters if they match the argument"
  fails "String#chomp! when passed an Object raises a TypeError if #to_str does not return a String"
  fails "String#chomp! when passed an Object calls #to_str to convert to a String"
  fails "String#chomp! when passed '\\n' returns nil when self is empty"
  fails "String#chomp! when passed '\\n' taints the result if self is tainted"
  fails "String#chomp! when passed '\\n' removes one trailing carrige return, newline pair"
  fails "String#chomp! when passed '\\n' removes one trailing carriage return"
  fails "String#chomp! when passed '\\n' removes one trailing newline"
  fails "String#chomp! when passed '' returns nil when self is empty"
  fails "String#chomp! when passed '' taints the result if self is tainted"
  fails "String#chomp! when passed '' removes more than one trailing carriage return, newline pairs"
  fails "String#chomp! when passed '' removes more than one trailing newlines"
  fails "String#chomp! when passed '' does not remove a final carriage return"
  fails "String#chomp! when passed '' removes a final carriage return, newline"
  fails "String#chomp! when passed '' removes a final newline"
  fails "String#chomp! when passed nil returns nil when self is empty"
  fails "String#chomp! when passed nil returns nil"
  fails "String#chomp! when passed no argument removes trailing characters that match $/ when it has been assigned a value"
  fails "String#chomp! when passed no argument returns subclass instances when called on a subclass"
  fails "String#chomp! when passed no argument taints the result if self is tainted"
  fails "String#chomp! when passed no argument returns nil when self is empty"
  fails "String#chomp! when passed no argument removes one trailing carrige return, newline pair"
  fails "String#chomp! when passed no argument removes one trailing carriage return"
  fails "String#chomp! when passed no argument removes one trailing newline"
  fails "String#chomp! when passed no argument returns nil if self is not modified"
  fails "String#chomp! when passed no argument modifies self"
  fails "String#chomp! raises a RuntimeError on a frozen instance when it would not be modified"
  fails "String#chomp! raises a RuntimeError on a frozen instance when it is modified"

  fails "Array#fill does not replicate the filler"

  fails "Hash literal freezes string keys on initialization"

  fails "Time#strftime formats time according to the directives in the given format string"
  fails "Time#strftime with %z formats a local time with positive UTC offset as '+HHMM'"
  fails "Time#strftime with %z formats a local time with negative UTC offset as '-HHMM'"

  fails "String#<< concatenates the given argument to self and returns self"
  fails "String#<< converts the given argument to a String using to_str"
  fails "String#<< converts the given argument to a String using to_str"
  fails "String#<< raises a TypeError if the given argument can't be converted to a String"
  fails "String#<< raises a RuntimeError when self is frozen"
  fails "String#<< works when given a subclass instance"
  fails "String#<< taints self if other is tainted"
  fails "String#<< untrusts self if other is untrusted"
  fails "String#<< with Integer concatencates the argument interpreted as a codepoint"
  fails "String#<< with Integer returns a ASCII-8BIT string if self is US-ASCII and the argument is between 128-255 (inclusive)"
  fails "String#<< with Integer raises RangeError if the argument is an invalid codepoint for self's encoding"
  fails "String#<< with Integer raises RangeError if the argument is negative"
  fails "String#<< with Integer doesn't call to_int on its argument"
  fails "String#<< with Integer raises a RuntimeError when self is frozen"
  fails "String#<< when self is in an ASCII-incompatible encoding incompatible with the argument's encoding uses self's encoding if both are empty"
  fails "String#<< when self is in an ASCII-incompatible encoding incompatible with the argument's encoding uses self's encoding if the argument is empty"
  fails "String#<< when self is in an ASCII-incompatible encoding incompatible with the argument's encoding uses the argument's encoding if self is empty"
  fails "String#<< when self is in an ASCII-incompatible encoding incompatible with the argument's encoding raises Encoding::CompatibilityError if neither are empty"
  fails "String#<< when the argument is in an ASCII-incompatible encoding incompatible with self's encoding uses self's encoding if both are empty"
  fails "String#<< when the argument is in an ASCII-incompatible encoding incompatible with self's encoding uses self's encoding if the argument is empty"
  fails "String#<< when the argument is in an ASCII-incompatible encoding incompatible with self's encoding uses the argument's encoding if self is empty"
  fails "String#<< when the argument is in an ASCII-incompatible encoding incompatible with self's encoding raises Encoding::CompatibilityError if neither are empty"
  fails "String#<< when self and the argument are in different ASCII-compatible encodings uses self's encoding if both are ASCII-only"
  fails "String#<< when self and the argument are in different ASCII-compatible encodings uses self's encoding if the argument is ASCII-only"
  fails "String#<< when self and the argument are in different ASCII-compatible encodings uses the argument's encoding if self is ASCII-only"
  fails "String#<< when self and the argument are in different ASCII-compatible encodings raises Encoding::CompatibilityError if neither are ASCII-only"
  fails "String#<< when self is ASCII-8BIT and argument is US-ASCII uses ASCII-8BIT encoding"

  fails "String#chomp when passed no argument returns a copy of the String when it is not modified"

  fails "String#chop returns a new string when applied to an empty string"

  fails "String#chop! removes the final character"
  fails "String#chop! removes the final carriage return"
  fails "String#chop! removes the final newline"
  fails "String#chop! removes the final carriage return, newline"
  fails "String#chop! removes the carrige return, newline if they are the only characters"
  fails "String#chop! does not remove more than the final carriage return, newline"
  fails "String#chop! returns self if modifications were made"
  fails "String#chop! returns nil when called on an empty string"
  fails "String#chop! raises a RuntimeError on a frozen instance that is modified"
  fails "String#chop! raises a RuntimeError on a frozen instance that would not be modified"

  fails "String#gsub! with pattern and Hash returns self with all occurrences of pattern replaced with the value of the corresponding hash key"
  fails "String#gsub! with pattern and Hash ignores keys that don't correspond to matches"
  fails "String#gsub! with pattern and Hash replaces self with an empty string if the pattern matches but the hash specifies no replacements"
  fails "String#gsub! with pattern and Hash ignores non-String keys"
  fails "String#gsub! with pattern and Hash uses a key's value as many times as needed"
  fails "String#gsub! with pattern and Hash uses the hash's default value for missing keys"
  fails "String#gsub! with pattern and Hash coerces the hash values with #to_s"
  fails "String#gsub! with pattern and Hash coerces the hash values with #to_s"
  fails "String#gsub! with pattern and Hash uses the hash's value set from default_proc for missing keys"
  fails "String#gsub! with pattern and Hash sets $~ to MatchData of last match and nil when there's none for access from outside"
  fails "String#gsub! with pattern and Hash doesn't interpolate special sequences like \\1 for the block's return value"
  fails "String#gsub! with pattern and Hash keeps untrusted state"
  fails "String#gsub! with pattern and Hash untrusts self if a hash value is untrusted"
  fails "String#gsub! with pattern and Hash keeps tainted state"
  fails "String#gsub! with pattern and Hash taints self if a hash value is tainted"
  fails "String#gsub! with pattern and replacement modifies self in place and returns self"
  fails "String#gsub! with pattern and replacement taints self if replacement is tainted"
  fails "String#gsub! with pattern and replacement untrusts self if replacement is untrusted"
  fails "String#gsub! with pattern and replacement returns nil if no modifications were made"
  fails "String#gsub! with pattern and replacement raises a RuntimeError when self is frozen"
  fails "String#gsub! with pattern and block modifies self in place and returns self"
  fails "String#gsub! with pattern and block taints self if block's result is tainted"
  fails "String#gsub! with pattern and block untrusts self if block's result is untrusted"
  fails "String#gsub! with pattern and block returns nil if no modifications were made"
  fails "String#gsub! with pattern and block raises a RuntimeError when self is frozen"
  fails "String#gsub! with pattern and block uses the compatible encoding if they are compatible"
  fails "String#gsub! with pattern and block raises an Encoding::CompatibilityError if the encodings are not compatible"
  fails "String#gsub! with pattern and block replaces the incompatible part properly even if the encodings are not compatible"

  fails "String#lstrip! modifies self in place and returns self"
  fails "String#lstrip! returns nil if no modifications were made"
  fails "String#lstrip! raises a RuntimeError on a frozen instance that is modified"
  fails "String#lstrip! raises a RuntimeError on a frozen instance that would not be modified"

  fails "String#next! is equivalent to succ, but modifies self in place (still returns self)"
  fails "String#next! raises a RuntimeError if self is frozen"

  fails "String#rstrip! modifies self in place and returns self"
  fails "String#rstrip! modifies self removing trailing NULL bytes and whitespace"
  fails "String#rstrip! returns nil if no modifications were made"
  fails "String#rstrip! raises a RuntimeError on a frozen instance that is modified"
  fails "String#rstrip! raises a RuntimeError on a frozen instance that would not be modified"

  fails "String#slice! with index deletes and return the char at the given position"
  fails "String#slice! with index returns nil if idx is outside of self"
  fails "String#slice! with index raises a RuntimeError if self is frozen"
  fails "String#slice! with index calls to_int on index"
  fails "String#slice! with index, length deletes and returns the substring at idx and the given length"
  fails "String#slice! with index, length always taints resulting strings when self is tainted"
  fails "String#slice! with index, length returns nil if the length is negative"
  fails "String#slice! with index, length raises a RuntimeError if self is frozen"
  fails "String#slice! with index, length calls to_int on idx and length"
  fails "String#slice! with index, length returns subclass instances"
  fails "String#slice! Range deletes and return the substring given by the offsets of the range"
  fails "String#slice! Range returns nil if the given range is out of self"
  fails "String#slice! Range always taints resulting strings when self is tainted"
  fails "String#slice! Range returns subclass instances"
  fails "String#slice! Range calls to_int on range arguments"
  fails "String#slice! Range works with Range subclasses"
  fails "String#slice! Range raises a RuntimeError on a frozen instance that is modified"
  fails "String#slice! Range raises a RuntimeError on a frozen instance that would not be modified"
  fails "String#slice! with Regexp deletes and returns the first match from self"
  fails "String#slice! with Regexp returns nil if there was no match"
  fails "String#slice! with Regexp always taints resulting strings when self or regexp is tainted"
  fails "String#slice! with Regexp doesn't taint self when regexp is tainted"
  fails "String#slice! with Regexp returns subclass instances"
  fails "String#slice! with Regexp sets $~ to MatchData when there is a match and nil when there's none"
  fails "String#slice! with Regexp raises a RuntimeError on a frozen instance that is modified"
  fails "String#slice! with Regexp raises a RuntimeError on a frozen instance that would not be modified"
  fails "String#slice! with Regexp, index deletes and returns the capture for idx from self"
  fails "String#slice! with Regexp, index always taints resulting strings when self or regexp is tainted"
  fails "String#slice! with Regexp, index doesn't taint self when regexp is tainted"
  fails "String#slice! with Regexp, index returns nil if there was no match"
  fails "String#slice! with Regexp, index returns nil if there is no capture for idx"
  fails "String#slice! with Regexp, index calls to_int on idx"
  fails "String#slice! with Regexp, index returns subclass instances"
  fails "String#slice! with Regexp, index sets $~ to MatchData when there is a match and nil when there's none"
  fails "String#slice! with Regexp, index raises a RuntimeError if self is frozen"
  fails "String#slice! with String removes and returns the first occurrence of other_str from self"
  fails "String#slice! with String taints resulting strings when other is tainted"
  fails "String#slice! with String doesn't set $~"
  fails "String#slice! with String returns nil if self does not contain other"
  fails "String#slice! with String doesn't call to_str on its argument"
  fails "String#slice! with String returns a subclass instance when given a subclass instance"
  fails "String#slice! with String raises a RuntimeError if self is frozen"

  fails "String#[]= with Fixnum index replaces the char at idx with other_str"
  fails "String#[]= with Fixnum index taints self if other_str is tainted"
  fails "String#[]= with Fixnum index raises an IndexError without changing self if idx is outside of self"
  fails "String#[]= with Fixnum index allows assignment to the zero'th element of an empty String"
  fails "String#[]= with Fixnum index raises IndexError if the string index doesn't match a position in the string"
  fails "String#[]= with Fixnum index raises a RuntimeError when self is frozen"
  fails "String#[]= with Fixnum index calls to_int on index"
  fails "String#[]= with Fixnum index calls #to_str to convert other to a String"
  fails "String#[]= with Fixnum index raises a TypeError if other_str can't be converted to a String"
  fails "String#[]= with String index replaces fewer characters with more characters"
  fails "String#[]= with String index replaces more characters with fewer characters"
  fails "String#[]= with String index replaces characters with no characters"
  fails "String#[]= with String index raises an IndexError if the search String is not found"
  fails "String#[]= with a Regexp index replaces the matched text with the rhs"
  fails "String#[]= with a Regexp index raises IndexError if the regexp index doesn't match a position in the string"
  fails "String#[]= with a Regexp index calls #to_str to convert the replacement"
  fails "String#[]= with a Regexp index checks the match before calling #to_str to convert the replacement"
  fails "String#[]= with a Regexp index with 3 arguments calls #to_int to convert the second object"
  fails "String#[]= with a Regexp index with 3 arguments raises a TypeError if #to_int does not return a Fixnum"
  fails "String#[]= with a Regexp index with 3 arguments uses the 2nd of 3 arguments as which capture should be replaced"
  fails "String#[]= with a Regexp index with 3 arguments allows the specified capture to be negative and count from the end"
  fails "String#[]= with a Regexp index with 3 arguments checks the match index before calling #to_str to convert the replacement"
  fails "String#[]= with a Regexp index with 3 arguments raises IndexError if the specified capture isn't available"
  fails "String#[]= with a Regexp index with 3 arguments when the optional capture does not match raises an IndexError before setting the replacement"
  fails "String#[]= with a Range index replaces the contents with a shorter String"
  fails "String#[]= with a Range index replaces the contents with a longer String"
  fails "String#[]= with a Range index replaces a partial string"
  fails "String#[]= with a Range index raises a RangeError if negative Range begin is out of range"
  fails "String#[]= with a Range index raises a RangeError if positive Range begin is greater than String size"
  fails "String#[]= with a Range index uses the Range end as an index rather than a count"
  fails "String#[]= with a Range index treats a negative out-of-range Range end with a positive Range begin as a zero count"
  fails "String#[]= with a Range index treats a negative out-of-range Range end with a negative Range begin as a zero count"
  fails "String#[]= with a Range index with an empty replacement does not replace a character with a zero-index, zero exclude-end range"
  fails "String#[]= with a Range index with an empty replacement does not replace a character with a zero exclude-end range"
  fails "String#[]= with a Range index with an empty replacement replaces a character with zero-index, zero non-exclude-end range"
  fails "String#[]= with a Range index with an empty replacement replaces a character with a zero non-exclude-end range"
  fails "String#[]= with Fixnum index, count starts at idx and overwrites count characters before inserting the rest of other_str"
  fails "String#[]= with Fixnum index, count counts negative idx values from end of the string"
  fails "String#[]= with Fixnum index, count overwrites and deletes characters if count is more than the length of other_str"
  fails "String#[]= with Fixnum index, count deletes characters if other_str is an empty string"
  fails "String#[]= with Fixnum index, count deletes characters up to the maximum length of the existing string"
  fails "String#[]= with Fixnum index, count appends other_str to the end of the string if idx == the length of the string"
  fails "String#[]= with Fixnum index, count taints self if other_str is tainted"
  fails "String#[]= with Fixnum index, count calls #to_int to convert the index and count objects"
  fails "String#[]= with Fixnum index, count raises a TypeError if #to_int for index does not return an Integer"
  fails "String#[]= with Fixnum index, count raises a TypeError if #to_int for count does not return an Integer"
  fails "String#[]= with Fixnum index, count calls #to_str to convert the replacement object"
  fails "String#[]= with Fixnum index, count raises a TypeError of #to_str does not return a String"
  fails "String#[]= with Fixnum index, count raises an IndexError if |idx| is greater than the length of the string"
  fails "String#[]= with Fixnum index, count raises an IndexError if count < 0"
  fails "String#[]= with Fixnum index, count raises a TypeError if other_str is a type other than String"

  fails "String#squeeze! modifies self in place and returns self"
  fails "String#squeeze! returns nil if no modifications were made"
  fails "String#squeeze! raises an ArgumentError when the parameter is out of sequence"
  fails "String#squeeze! raises a RuntimeError when self is frozen"

  fails "String#strip! modifies self in place and returns self"
  fails "String#strip! returns nil if no modifications where made"
  fails "String#strip! modifies self removing trailing NULL bytes and whitespace"
  fails "String#strip! raises a RuntimeError on a frozen instance that is modified"
  fails "String#strip! raises a RuntimeError on a frozen instance that would not be modified"

  fails "String#sub! with pattern, replacement modifies self in place and returns self"
  fails "String#sub! with pattern, replacement taints self if replacement is tainted"
  fails "String#sub! with pattern, replacement returns nil if no modifications were made"
  fails "String#sub! with pattern, replacement raises a RuntimeError when self is frozen"
  fails "String#sub! with pattern and block modifies self in place and returns self"
  fails "String#sub! with pattern and block sets $~ for access from the block"
  fails "String#sub! with pattern and block taints self if block's result is tainted"
  fails "String#sub! with pattern and block returns nil if no modifications were made"
  fails "String#sub! with pattern and block raises a RuntimeError if the string is modified while substituting"
  fails "String#sub! with pattern and block raises a RuntimeError when self is frozen"
  fails "String#sub! with pattern and Hash returns self with the first occurrence of pattern replaced with the value of the corresponding hash key"
  fails "String#sub! with pattern and Hash removes keys that don't correspond to matches"
  fails "String#sub! with pattern and Hash ignores non-String keys"
  fails "String#sub! with pattern and Hash uses a key's value only a single time"
  fails "String#sub! with pattern and Hash uses the hash's default value for missing keys"
  fails "String#sub! with pattern and Hash coerces the hash values with #to_s"
  fails "String#sub! with pattern and Hash coerces the hash values with #to_s"
  fails "String#sub! with pattern and Hash uses the hash's value set from default_proc for missing keys"
  fails "String#sub! with pattern and Hash sets $~ to MatchData of first match and nil when there's none for access from outside"
  fails "String#sub! with pattern and Hash doesn't interpolate special sequences like \\1 for the block's return value"
  fails "String#sub! with pattern and Hash keeps untrusted state"
  fails "String#sub! with pattern and Hash untrusts self if a hash value is untrusted"
  fails "String#sub! with pattern and Hash keeps tainted state"
  fails "String#sub! with pattern and Hash taints self if a hash value is tainted"

  fails "String#succ! is equivalent to succ, but modifies self in place (still returns self)"
  fails "String#succ! raises a RuntimeError if self is frozen"

  fails "String#tr! modifies self in place"
  fails "String#tr! returns nil if no modification was made"
  fails "String#tr! does not modify self if from_str is empty"
  fails "String#tr! raises a RuntimeError if self is frozen"

  fails "String#tr_s! modifies self in place"
  fails "String#tr_s! returns nil if no modification was made"
  fails "String#tr_s! does not modify self if from_str is empty"
  fails "String#tr_s! raises a RuntimeError if self is frozen"

  fails "String#setbyte raises a TypeError unless the second argument is an Integer"
  fails "String#setbyte raises a RuntimeError if self is frozen"
  fails "String#setbyte does not modify the original string when using String.new"
  fails "String#setbyte sets a byte at an index greater than String size"
  fails "String#setbyte raises an IndexError if the nexgative index is greater magnitude than the String bytesize"
  fails "String#setbyte raises an IndexError if the index is greater than the String bytesize"
  fails "String#setbyte regards a negative index as counting from the end of the String"
  fails "String#setbyte can invalidate a String's encoding"
  fails "String#setbyte allows changing bytes in multi-byte characters"
  fails "String#setbyte changes the byte at the given index to the new byte"
  fails "String#setbyte modifies the receiver"
  fails "String#setbyte returns an Integer"

  fails "String#prepend taints self if other is tainted"
  fails "String#prepend works when given a subclass instance"
  fails "String#prepend raises a RuntimeError when self if frozen"
  fails "String#prepend raises a TypeError if the given argument can't be converted to a String"
  fails "String#prepend converts the given argument to a String using to_str"
  fails "String#prepend prepends the given argument to self and returns self"

  fails "String#replace raises a RuntimeError on a frozen instance when self-replacing"
  fails "String#replace raises a RuntimeError on a frozen instance that is modified"
  fails "String#replace raises a TypeError if other can't be converted to string"
  fails "String#replace tries to convert other to string using to_str"
  fails "String#replace replaces the encoding of self with that of other"
  fails "String#replace does not trust self if other is trusted"
  fails "String#replace untrusts self if other is untrusted"
  fails "String#replace does not untaint self if other is untainted"
  fails "String#replace taints self if other is tainted"
  fails "String#replace replaces the content of self with other"
  fails "String#replace returns self"
  fails "String#replace does not raise an exception when frozen"

  fails "String#insert with index, other raises a RuntimeError if self is frozen"
  fails "String#insert with index, other raises a TypeError if other can't be converted to string"
  fails "String#insert with index, other taints self if string to insert is tainted"
  fails "String#insert with index, other converts other to a string using to_str"
  fails "String#insert with index, other converts index to an integer using to_int"
  fails "String#insert with index, other raises an IndexError if the index is beyond string"
  fails "String#insert with index, other inserts after the given character on an negative count"
  fails "String#insert with index, other modifies self in place"
  fails "String#insert with index, other inserts other before the character at the given index"

  fails "String#delete! modifies self in place and returns self"
  fails "String#delete! returns nil if no modifications were made"
  fails "String#delete! raises a RuntimeError when self is frozen"

  fails "String#concat concatenates the given argument to self and returns self"
  fails "String#concat converts the given argument to a String using to_str"
  fails "String#concat raises a TypeError if the given argument can't be converted to a String"
  fails "String#concat raises a RuntimeError when self is frozen"
  fails "String#concat works when given a subclass instance"
  fails "String#concat taints self if other is tainted"
  fails "String#concat untrusts self if other is untrusted"
  fails "String#concat with Integer concatencates the argument interpreted as a codepoint"
  fails "String#concat with Integer returns a ASCII-8BIT string if self is US-ASCII and the argument is between 128-255 (inclusive)"
  fails "String#concat with Integer raises RangeError if the argument is an invalid codepoint for self's encoding"
  fails "String#concat with Integer raises RangeError if the argument is negative"
  fails "String#concat with Integer doesn't call to_int on its argument"
  fails "String#concat with Integer raises a RuntimeError when self is frozen"
  fails "String#concat when self is in an ASCII-incompatible encoding incompatible with the argument's encoding uses self's encoding if both are empty"
  fails "String#concat when self is in an ASCII-incompatible encoding incompatible with the argument's encoding uses self's encoding if the argument is empty"
  fails "String#concat when self is in an ASCII-incompatible encoding incompatible with the argument's encoding uses the argument's encoding if self is empty"
  fails "String#concat when self is in an ASCII-incompatible encoding incompatible with the argument's encoding raises Encoding::CompatibilityError if neither are empty"
  fails "String#concat when the argument is in an ASCII-incompatible encoding incompatible with self's encoding uses self's encoding if both are empty"
  fails "String#concat when the argument is in an ASCII-incompatible encoding incompatible with self's encoding uses self's encoding if the argument is empty"
  fails "String#concat when the argument is in an ASCII-incompatible encoding incompatible with self's encoding uses the argument's encoding if self is empty"
  fails "String#concat when the argument is in an ASCII-incompatible encoding incompatible with self's encoding raises Encoding::CompatibilityError if neither are empty"
  fails "String#concat when self and the argument are in different ASCII-compatible encodings uses self's encoding if both are ASCII-only"
  fails "String#concat when self and the argument are in different ASCII-compatible encodings uses self's encoding if the argument is ASCII-only"
  fails "String#concat when self and the argument are in different ASCII-compatible encodings uses the argument's encoding if self is ASCII-only"
  fails "String#concat when self and the argument are in different ASCII-compatible encodings raises Encoding::CompatibilityError if neither are ASCII-only"
  fails "String#concat when self is ASCII-8BIT and argument is US-ASCII uses ASCII-8BIT encoding"
end
